################################################################################
# PkgEval set-up: 2021-01-11T21:47:34.89
#

Julia Version 1.5.3
Commit 599f52c4c6 (2020-12-18 13:33 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, znver2)
Environment:
  JULIA_PKG_PRECOMPILE_AUTO = 0
  JULIA_PKGEVAL = true

Base.julia_cmd() = `/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1`


################################################################################
# Installation: 2021-01-11T21:47:36.73
#

 Installing known registries into `~/.julia`
###############                                                           22.0%######################################################################## 100.0%
      Added registry `General` to `~/.julia/registries/General`
  Resolving package versions...
  Installed Unmarshal ────────── v0.4.2
  Installed Requires ─────────── v1.1.2
  Installed Missings ─────────── v0.4.4
  Installed Nullables ────────── v1.0.0
  Installed DataAPI ──────────── v1.4.0
  Installed JSON ─────────────── v0.21.1
  Installed PropertyDicts ────── v0.1.0
  Installed OrderedCollections ─ v1.3.2
  Installed Parsers ──────────── v1.0.15
  Installed LazyJSON ─────────── v0.2.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [cbff2730] + Unmarshal v0.4.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [9a962f9c] + DataAPI v1.4.0
  [682c06a0] + JSON v0.21.1
  [fc18253b] + LazyJSON v0.2.2
  [e1d29d7a] + Missings v0.4.4
  [4d1e1d77] + Nullables v1.0.0
  [bac558e1] + OrderedCollections v1.3.2
  [69de0a69] + Parsers v1.0.15
  [f8a19df8] + PropertyDicts v0.1.0
  [ae029012] + Requires v1.1.2
  [cbff2730] + Unmarshal v0.4.2
  [ade2ca70] + Dates
  [a63ad114] + Mmap
  [de0858da] + Printf
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode


################################################################################
# Testing: 2021-01-11T21:47:41.949
#

    Testing Unmarshal
Status `/tmp/jl_kemzOR/Project.toml`
  [682c06a0] JSON v0.21.1
  [fc18253b] LazyJSON v0.2.2
  [e1d29d7a] Missings v0.4.4
  [4d1e1d77] Nullables v1.0.0
  [ae029012] Requires v1.1.2
  [cbff2730] Unmarshal v0.4.2
  [37e2e46d] LinearAlgebra
  [8dfed614] Test
Status `/tmp/jl_kemzOR/Manifest.toml`
  [9a962f9c] DataAPI v1.4.0
  [682c06a0] JSON v0.21.1
  [fc18253b] LazyJSON v0.2.2
  [e1d29d7a] Missings v0.4.4
  [4d1e1d77] Nullables v1.0.0
  [bac558e1] OrderedCollections v1.3.2
  [69de0a69] Parsers v1.0.15
  [f8a19df8] PropertyDicts v0.1.0
  [ae029012] Requires v1.1.2
  [cbff2730] Unmarshal v0.4.2
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [de0858da] Printf
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Start testing with library JSON
Unmarshal.unmarshal(BazNullable, JSON.parse(input2)) === BazNullable(Nullable{Float64}(), Bar(17)) = false
Vector{Float64}
Foo AbstractDict
\--> bar <: Bar 
	Bar AbstractDict
	\--> baz <: Int64 
Array{Float64, 3}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
Any{Int64}
List
Tuple: Tuple{NTuple{4,Float64},Tuple{Float64,Float64}}
	Tuple: NTuple{4,Float64}
	Tuple: Tuple{Float64,Float64}
Tuple: Tuple
	Any{Any}
	List
	Any{Any}
	List
Tuple: Tuple{Vararg{Array,N} where N}
	Vector{Any}
	Vector{Any}
Tuple: Tuple{Array,Array}
	Vector{Any}
	Vector{Any}
Tuple: Tuple{Vararg{Tuple,N} where N}
	Tuple: Tuple
	Tuple: Tuple
Tuple: Tuple{Vararg{Tuple{Vararg{Float64,N} where N},N} where N}
	Tuple: Tuple{Vararg{Float64,N} where N}
	Tuple: Tuple{Vararg{Float64,N} where N}
TupleTest AbstractDict
\--> a <: Tuple 
	Tuple: Tuple
\--> b <: Tuple{Int64,Float64} 
	Tuple: Tuple{Int64,Float64}
\--> c <: Tuple{Float64,Vararg{Int64,N} where N} 
	Tuple: Tuple{Float64,Vararg{Int64,N} where N}
\--> d <: NamedTuple{(:x, :y),T} where T<:Tuple 
	NamedTuple{(:x, :y),Tuple{Any,Any}}
	\--> x 
	\--> y 
\--> e <: NamedTuple{(:x, :y),Tuple{Int64,Float64}} 
	NamedTuple{(:x, :y),Tuple{Int64,Float64}}
	\--> x 
	\--> y 
DictTest AbstractDict
\--> testDict <: Dict{Int64,String} 
	Dict{Int64,String} Dict 
	\--> 1 String
		String (String)
	\--> 2 String
		String (String)
dictTest2 = Dict("k" => "val") = Dict("k" => "val")
Dict{String,String} Dict 
\--> k String
	String (String)
Unmarshal.unmarshal(TestUnmarshal, j) = TestUnmarshal("", "Test", Dict("self" => "TestDict"))
Starting tests on Pairs
Pair Pair{String,String} AbstractDict
Pair Pair{Int64,Int64} AbstractDict
Pair Pair{String,Int64} AbstractDict
Pair Pair{Int64,String} AbstractDict
Pair Pair{Int64,Array{Float64,1}} AbstractDict
┌ Warning: Expected a single pair, but found a multi-entry dictionary, just using the first key: 1
└ @ Unmarshal ~/.julia/packages/Unmarshal/4tOu7/src/Unmarshal.jl:145
Unmarshal.unmarshal(typeof(p), JSON.parse(raw)) = "1" => "Test1"
Pair Pair{Int64,Dict{String,Int64}} AbstractDict
Pair Pair{Int64,Dict{String,Int64}} AbstractDict
Tweet AbstractDict
\--> id <: Union{Nothing, Int64} 
\--> id_str <: Union{Nothing, String} 
	String (String)
\--> created_at <: Union{Nothing, String} 
	String (String)
\--> favorite_count <: Union{Nothing, Int64} 
\--> retweet_count <: Union{Nothing, Int64} 
\--> full_text <: Union{Nothing, String} 
\--> lang <: Union{Nothing, String} 
\--> place <: Union{Nothing, String} 
\--> truncated <: Union{Nothing, Bool} 
\--> user <: User 
	User AbstractDict
	\--> id <: Union{Nothing, Int64} 
	\--> id_str <: Union{Nothing, String} 
		String (String)
	\--> created_at <: Union{Nothing, String} 
		String (String)
	\--> name <: Union{Nothing, String} 
		String (String)
	\--> screen_name <: Union{Nothing, String} 
	\--> location <: Union{Nothing, String} 
	\--> statuses_count <: Union{Nothing, Int64} 
	\--> followers_count <: Union{Nothing, Int64} 
	\--> description <: Union{Nothing, String} 
	\--> profile_image_url <: Union{Nothing, String} 
Done testing with library JSON
Start testing with library LazyJSON
Unmarshal.unmarshal(BazNullable, LazyJSON.parse(input2)) === BazNullable(Nullable{Float64}(), Bar(17)) = true
Vector{Float64}
jstring = "{\"a1\":[0.0,1.0,2.0],\"a2\":[1,2,3]}"
LazyJSON.parse(jstring) = LazyJSON.Object{Nothing,String}("a1" => Any[0.0, 1.0, 2.0],"a2" => Any[1, 2, 3])
Foo AbstractDict
\--> bar <: Bar 
	Bar AbstractDict
	\--> baz <: Int64 
Array{Float64, 3}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
Any{Any}
List
Tuple: Tuple
	Any{Any}
	List
	Any{Any}
	List
Tuple: Tuple{Vararg{Array,N} where N}
	Vector{Any}
	Vector{Any}
Tuple: Tuple{Array,Array}
	Vector{Any}
	Vector{Any}
Tuple: Tuple{Vararg{Tuple,N} where N}
	Tuple: Tuple
	Tuple: Tuple
Tuple: Tuple{Vararg{Tuple{Vararg{Float64,N} where N},N} where N}
	Tuple: Tuple{Vararg{Float64,N} where N}
	Tuple: Tuple{Vararg{Float64,N} where N}
TupleTest AbstractDict
\--> a <: Tuple 
	Tuple: Tuple
\--> b <: Tuple{Int64,Float64} 
	Tuple: Tuple{Int64,Float64}
\--> c <: Tuple{Float64,Vararg{Int64,N} where N} 
	Tuple: Tuple{Float64,Vararg{Int64,N} where N}
\--> d <: NamedTuple{(:x, :y),T} where T<:Tuple 
	NamedTuple{(:x, :y),Tuple{Any,Any}}
	\--> x 
	\--> y 
\--> e <: NamedTuple{(:x, :y),Tuple{Int64,Float64}} 
	NamedTuple{(:x, :y),Tuple{Int64,Float64}}
	\--> x 
	\--> y 
js = Unmarshal.unmarshal(TupleTest, LazyJSON.parse(jstring), true) = TupleTest(("a", 1, 5), (5, 3.5), (1.2, 6, 7, 3), (x = 5, y = 9), (x = 3, y = 1.4))
(typeof(testTuples.a), typeof(js.a)) = (Tuple{String,Int64,Int64}, Tuple{LazyJSON.String{String},LazyJSON.Number{String},LazyJSON.Number{String}})
(typeof(testTuples.d), typeof(js.d)) = (NamedTuple{(:x, :y),Tuple{Int64,Int64}}, NamedTuple{(:x, :y),Tuple{LazyJSON.Number{String},LazyJSON.Number{String}}})
DictTest AbstractDict
\--> testDict <: Dict{Int64,String} 
	Dict{Int64,String} Dict from LazyJSON
	\--> 2 String
	\--> 1 String
dictTest2 = Dict("k" => "val") = Dict("k" => "val")
Dict{String,String} Dict from LazyJSON
\--> k String
Unmarshal.unmarshal(TestUnmarshal, j) = TestUnmarshal("", "Test", Dict("self" => "TestDict"))
Starting tests on Pairs
Pair Pair{String,String} AbstractDict
Pair Pair{Int64,Int64} AbstractDict
Pair Pair{String,Int64} AbstractDict
Pair Pair{Int64,String} AbstractDict
Pair Pair{Int64,Array{Float64,1}} AbstractDict
┌ Warning: Expected a single pair, but found a multi-entry dictionary, just using the first key: 2
└ @ Unmarshal ~/.julia/packages/Unmarshal/4tOu7/src/lazyjson.jl:35
Unmarshal.unmarshal(typeof(p), LazyJSON.parse(raw)) = "2" => "Test2"
Pair Pair{Int64,Dict{String,Int64}} AbstractDict
Pair Pair{Int64,Dict{String,Int64}} AbstractDict
Done testing with library LazyJSON
    Testing Unmarshal tests passed 

PkgEval succeeded


################################################################################
# PkgEval teardown: 2021-01-11T21:48:17.284
CPU usage: 42.46s (38.53s user, 4.00s kernel)

Network usage:
- eth0: 3.317 MiB received, 76.536 KiB sent

Raw statistics: {"blkio_stats":{"io_queue_recursive":[],"io_serviced_recursive":[{"major":259,"value":0,"op":"Read","minor":0},{"major":259,"value":24,"op":"Write","minor":0},{"major":259,"value":19,"op":"Sync","minor":0},{"major":259,"value":5,"op":"Async","minor":0},{"major":259,"value":0,"op":"Discard","minor":0},{"major":259,"value":24,"op":"Total","minor":0},{"major":253,"value":0,"op":"Read","minor":2},{"major":253,"value":24,"op":"Write","minor":2},{"major":253,"value":19,"op":"Sync","minor":2},{"major":253,"value":5,"op":"Async","minor":2},{"major":253,"value":0,"op":"Discard","minor":2},{"major":253,"value":24,"op":"Total","minor":2}],"io_time_recursive":[],"sectors_recursive":[],"io_service_bytes_recursive":[{"major":259,"value":0,"op":"Read","minor":0},{"major":259,"value":126976,"op":"Write","minor":0},{"major":259,"value":106496,"op":"Sync","minor":0},{"major":259,"value":20480,"op":"Async","minor":0},{"major":259,"value":0,"op":"Discard","minor":0},{"major":259,"value":126976,"op":"Total","minor":0},{"major":253,"value":0,"op":"Read","minor":2},{"major":253,"value":126976,"op":"Write","minor":2},{"major":253,"value":106496,"op":"Sync","minor":2},{"major":253,"value":20480,"op":"Async","minor":2},{"major":253,"value":0,"op":"Discard","minor":2},{"major":253,"value":126976,"op":"Total","minor":2}],"io_wait_time_recursive":[],"io_merged_recursive":[],"io_service_time_recursive":[]},"memory_stats":{"usage":293056512,"max_usage":951115776,"stats":{"hierarchical_memory_limit":9223372036854771712,"pgmajfault":0,"total_rss":172552192,"inactive_file":135168,"inactive_anon":83804160,"total_pgfault":954228,"total_cache":90263552,"total_rss_huge":0,"total_active_anon":179097600,"total_pgmajfault":0,"pgpgin":612249,"rss_huge":0,"mapped_file":0,"total_inactive_file":135168,"dirty":135168,"total_unevictable":0,"total_dirty":135168,"writeback":0,"pgpgout":548103,"hierarchical_memsw_limit":0,"cache":90263552,"active_file":135168,"pgfault":954228,"total_mapped_file":0,"total_pgpgout":548103,"total_writeback":0,"rss":172552192,"unevictable":0,"total_inactive_anon":83804160,"total_pgpgin":612249,"active_anon":179097600,"total_active_file":135168},"limit":540965302272},"name":"/Unmarshal-ywYmpuXB","networks":{"eth0":{"rx_bytes":3478638,"rx_packets":679,"tx_packets":714,"tx_bytes":78373,"tx_dropped":0,"rx_dropped":2,"tx_errors":0,"rx_errors":0}},"id":"76503fc16110a247ffac4bee90aa608d040eb1e7ba69feb4c10177a5dfe52a70","preread":"0001-01-01T00:00:00Z","storage_stats":{},"precpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"cpu_usage":{"usage_in_usermode":0,"usage_in_kernelmode":0,"total_usage":0}},"pids_stats":{"current":40},"num_procs":0,"cpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"system_cpu_usage":6109345294522419,"online_cpus":128,"cpu_usage":{"usage_in_usermode":38530000000,"usage_in_kernelmode":4000000000,"total_usage":42462021396,"percpu_usage":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42465749638,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},"read":"2021-01-11T21:48:17.287289155Z"}