################################################################################
# PackageCompiler set-up: 2021-01-11T22:42:47.547
#

Julia Version 1.5.3
Commit 599f52c4c6 (2020-12-18 13:33 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, znver2)
Environment:
  JULIA_PKGEVAL = true
  JULIA_PKG_PRECOMPILE_AUTO = 0



################################################################################
# Installation: 2021-01-11T22:42:49.268
#

 Installing known registries into `~/.julia`
###################################################                       71.2%######################################################################## 100.0%
      Added registry `General` to `~/.julia/registries/General`
  Resolving package versions...
  Installed NLopt ────────────── v0.5.1
  Installed URIParser ────────── v0.4.1
  Installed CMakeWrapper ─────── v0.2.4
  Installed Theta ────────────── v0.1.2
  Installed Parameters ───────── v0.12.1
  Installed BinDeps ──────────── v1.0.2
  Installed GSL ──────────────── v0.5.1
  Installed PackageCompiler ──── v1.2.5
  Installed UnPack ───────────── v1.0.2
  Installed CMake ────────────── v1.2.0
  Installed OrderedCollections ─ v1.3.2
  Installed MathProgBase ─────── v0.7.8
  Installed BinaryProvider ───── v0.5.10
Updating `~/.julia/environments/v1.5/Project.toml`
  [9b87118b] + PackageCompiler v1.2.5
  [42bdb5c4] + Theta v0.1.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [9e28174c] + BinDeps v1.0.2
  [b99e7846] + BinaryProvider v0.5.10
  [631607c0] + CMake v1.2.0
  [d5fb7624] + CMakeWrapper v0.2.4
  [92c85e6c] + GSL v0.5.1
  [fdba3010] + MathProgBase v0.7.8
  [76087f3c] + NLopt v0.5.1
  [bac558e1] + OrderedCollections v1.3.2
  [9b87118b] + PackageCompiler v1.2.5
  [d96e819e] + Parameters v0.12.1
  [42bdb5c4] + Theta v0.1.2
  [30578b45] + URIParser v0.4.1
  [3a884ed6] + UnPack v1.0.2
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building GSL ──→ `~/.julia/packages/GSL/IVE5m/deps/build.log`
   Building CMake → `~/.julia/packages/CMake/ULbyn/deps/build.log`
   Building NLopt → `~/.julia/packages/NLopt/eqN9a/deps/build.log`


################################################################################
# Compiling: 2021-01-11T22:43:20.922
#

[ Info: PackageCompiler: creating system image object file, this might take a while...
FATAL ERROR: Symbol "ccalllib_libgsl.so64303"not found
signal (6): Aborted
in expression starting at none:0
gsignal at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
abort at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
addModule at /workspace/srcdir/src/jitlayers.cpp:640
jl_add_to_ee at /workspace/srcdir/src/jitlayers.cpp:893 [inlined]
jl_add_to_ee at /workspace/srcdir/src/jitlayers.cpp:901
_jl_compile_codeinst at /workspace/srcdir/src/jitlayers.cpp:102
jl_generate_fptr at /workspace/srcdir/src/jitlayers.cpp:302
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1964
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1919 [inlined]
_jl_invoke at /workspace/srcdir/src/gf.c:2224 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2398
jl_apply at /workspace/srcdir/src/julia.h:1690 [inlined]
do_apply at /workspace/srcdir/src/builtins.c:655
jl_f__apply_pure at /workspace/srcdir/src/builtins.c:687
pure_eval_call at ./compiler/abstractinterpretation.jl:666
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:79
abstract_call_known at ./compiler/abstractinterpretation.jl:904
abstract_call at ./compiler/abstractinterpretation.jl:926
abstract_call at ./compiler/abstractinterpretation.jl:911
abstract_eval at ./compiler/abstractinterpretation.jl:1005
typeinf_local at ./compiler/abstractinterpretation.jl:1270
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1326
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:484
abstract_call_method at ./compiler/abstractinterpretation.jl:419
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:111
abstract_call_known at ./compiler/abstractinterpretation.jl:904
abstract_call at ./compiler/abstractinterpretation.jl:926
abstract_call at ./compiler/abstractinterpretation.jl:911
abstract_eval at ./compiler/abstractinterpretation.jl:1005
typeinf_local at ./compiler/abstractinterpretation.jl:1270
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1326
typeinf at ./compiler/typeinfer.jl:12
typeinf_ext at ./compiler/typeinfer.jl:570
typeinf_ext at ./compiler/typeinfer.jl:601
unknown function (ip: 0x7fe8b62114d5)
_jl_invoke at /workspace/srcdir/src/gf.c:2214 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2398
jl_apply at /workspace/srcdir/src/julia.h:1690 [inlined]
jl_type_infer at /workspace/srcdir/src/gf.c:296
jl_create_native at /workspace/srcdir/src/aotcompile.cpp:309
jl_precompile at /workspace/srcdir/src/precompile.c:408
jl_write_compiler_output at /workspace/srcdir/src/precompile.c:33
jl_atexit_hook at /workspace/srcdir/src/init.c:218
main at /workspace/srcdir/ui/repl.c:228
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
unknown function (ip: 0x4015e4)
Allocations: 15058063 (Pool: 15050684; Big: 7379); GC: 10
ERROR: failed process: Process(`/opt/julia/bin/julia --color=yes --startup-file=no --cpu-target=native --sysimage=/opt/julia/lib/julia/sys.so --project=/home/pkgeval/.julia/environments/v1.5 --output-o=/tmp/jl_9il0Ov.o -e 'Base.reinit_stdio()
@eval Sys BINDIR = ccall(:jl_get_julia_bindir, Any, ())::String
@eval Sys STDLIB = "/opt/julia/share/julia/stdlib/v1.5"
Base.init_load_path()
if isdefined(Base, :init_active_project)
    Base.init_active_project()
end
Base.init_depot_path()
import Theta
# This @eval prevents symbols from being put into Main
@eval Module() begin
    PrecompileStagingArea = Module()
    for (_pkgid, _mod) in Base.loaded_modules
        if !(_pkgid.name in ("Main", "Core", "Base"))
            eval(PrecompileStagingArea, :(const $(Symbol(_mod)) = $_mod))
        end
    end
    precompile_files = String[
        "/tmp/jl_c8iqjy"
    ]
    for file in precompile_files, statement in eachline(file)
        # println(statement)
        # The compiler has problem caching signatures with \`Vararg{?, N}\`. Replacing
        # N with a large number seems to work around it.
        statement = replace(statement, r"Vararg{(.*?), N} where N" => s"Vararg{\1, 100}")
        try
            Base.include_string(PrecompileStagingArea, statement)
        catch
            # See julia issue #28808
            @debug "failed to execute $statement"
        end
    end
end # module
empty!(LOAD_PATH)
empty!(DEPOT_PATH)
'`, ProcessSignaled(6)) [0]

Stacktrace:
 [1] pipeline_error at ./process.jl:525 [inlined]
 [2] run(::Cmd; wait::Bool) at ./process.jl:440
 [3] run at ./process.jl:438 [inlined]
 [4] create_sysimg_object_file(::String, ::Array{String,1}; project::String, base_sysimage::String, precompile_execution_file::Array{String,1}, precompile_statements_file::Array{String,1}, cpu_target::String, script::Nothing, isapp::Bool) at /home/pkgeval/.julia/packages/PackageCompiler/3BsME/src/PackageCompiler.jl:306
 [5] create_sysimage(::Symbol; sysimage_path::String, project::String, precompile_execution_file::Array{String,1}, precompile_statements_file::Array{String,1}, incremental::Bool, filter_stdlibs::Bool, replace_default::Bool, cpu_target::String, script::Nothing, base_sysimage::Nothing, isapp::Bool) at /home/pkgeval/.julia/packages/PackageCompiler/3BsME/src/PackageCompiler.jl:442
 [6] top-level scope at ./timing.jl:233

