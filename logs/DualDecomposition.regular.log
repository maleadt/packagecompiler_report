################################################################################
# PkgEval set-up: 2021-01-11T18:32:16.152
#

Julia Version 1.5.3
Commit 599f52c4c6 (2020-12-18 13:33 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, znver2)
Environment:
  JULIA_PKG_PRECOMPILE_AUTO = 0
  JULIA_PKGEVAL = true

Base.julia_cmd() = `/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1`


################################################################################
# Installation: 2021-01-11T18:32:18.139
#

 Installing known registries into `~/.julia`
#=#=#                                                                         ######################################################################## 100.0%
      Added registry `General` to `~/.julia/registries/General`
  Resolving package versions...
  Installed DualDecomposition ──────────── v0.1.2
  Installed CompilerSupportLibraries_jll ─ v0.3.4+0
  Installed MbedTLS_jll ────────────────── v2.16.8+1
  Installed Zlib_jll ───────────────────── v1.2.11+18
  Installed JSONSchema ─────────────────── v0.3.3
  Installed MuladdMacro ────────────────── v0.2.2
  Installed TranscodingStreams ─────────── v0.9.5
  Installed CommonSubexpressions ───────── v0.3.0
  Installed Calculus ───────────────────── v0.5.1
  Installed MPI ────────────────────────── v0.16.1
  Installed DataStructures ─────────────── v0.18.8
  Installed Requires ───────────────────── v1.1.2
  Installed JuMP ───────────────────────── v0.21.5
  Installed DiffRules ──────────────────── v1.0.2
  Installed MbedTLS ────────────────────── v1.0.3
  Installed Bzip2_jll ──────────────────── v1.0.6+5
  Installed DiffResults ────────────────── v1.0.3
  Installed BenchmarkTools ─────────────── v0.5.0
  Installed OrderedCollections ─────────── v1.3.2
  Installed HTTP ───────────────────────── v0.9.2
  Installed MicrosoftMPI_jll ───────────── v10.1.2+3
  Installed StaticArrays ───────────────── v1.0.1
  Installed CodecZlib ──────────────────── v0.7.0
  Installed BundleMethod ───────────────── v0.2.0
  Installed MacroTools ─────────────────── v0.5.6
  Installed NaNMath ────────────────────── v0.3.5
  Installed JSON ───────────────────────── v0.21.1
  Installed JLLWrappers ────────────────── v1.2.0
  Installed MathOptInterface ───────────── v0.9.19
  Installed ZipFile ────────────────────── v0.9.3
  Installed MPICH_jll ──────────────────── v3.3.2+10
  Installed CodecBzip2 ─────────────────── v0.7.2
  Installed SpecialFunctions ───────────── v1.2.1
  Installed MutableArithmetics ─────────── v0.2.13
  Installed URIs ───────────────────────── v1.1.0
  Installed ForwardDiff ────────────────── v0.10.14
  Installed ChainRulesCore ─────────────── v0.9.24
  Installed DocStringExtensions ────────── v0.8.3
  Installed OpenSpecFun_jll ────────────── v0.5.3+4
  Installed Compat ─────────────────────── v3.25.0
  Installed Parsers ────────────────────── v1.0.15
  Installed Artifacts ──────────────────── v1.3.0
  Installed IniFile ────────────────────── v0.5.0
  Installed OpenMPI_jll ────────────────── v4.0.2+2
Updating `~/.julia/environments/v1.5/Project.toml`
  [d0e446f1] + DualDecomposition v0.1.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [56f22d72] + Artifacts v1.3.0
  [6e4b80f9] + BenchmarkTools v0.5.0
  [e8a6717a] + BundleMethod v0.2.0
  [6e34b625] + Bzip2_jll v1.0.6+5
  [49dc2e85] + Calculus v0.5.1
  [d360d2e6] + ChainRulesCore v0.9.24
  [523fee87] + CodecBzip2 v0.7.2
  [944b1d66] + CodecZlib v0.7.0
  [bbf7d656] + CommonSubexpressions v0.3.0
  [34da2185] + Compat v3.25.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.4+0
  [864edb3b] + DataStructures v0.18.8
  [163ba53b] + DiffResults v1.0.3
  [b552c78f] + DiffRules v1.0.2
  [ffbed154] + DocStringExtensions v0.8.3
  [d0e446f1] + DualDecomposition v0.1.2
  [f6369f11] + ForwardDiff v0.10.14
  [cd3eb016] + HTTP v0.9.2
  [83e8ac13] + IniFile v0.5.0
  [692b3bcd] + JLLWrappers v1.2.0
  [682c06a0] + JSON v0.21.1
  [7d188eb4] + JSONSchema v0.3.3
  [4076af6c] + JuMP v0.21.5
  [da04e1cc] + MPI v0.16.1
  [7cb0a576] + MPICH_jll v3.3.2+10
  [1914dd2f] + MacroTools v0.5.6
  [b8f27783] + MathOptInterface v0.9.19
  [739be429] + MbedTLS v1.0.3
  [c8ffd9c3] + MbedTLS_jll v2.16.8+1
  [9237b28f] + MicrosoftMPI_jll v10.1.2+3
  [46d2c3a1] + MuladdMacro v0.2.2
  [d8a4904e] + MutableArithmetics v0.2.13
  [77ba4419] + NaNMath v0.3.5
  [fe0851c0] + OpenMPI_jll v4.0.2+2
  [efe28fd5] + OpenSpecFun_jll v0.5.3+4
  [bac558e1] + OrderedCollections v1.3.2
  [69de0a69] + Parsers v1.0.15
  [ae029012] + Requires v1.1.2
  [276daf66] + SpecialFunctions v1.2.1
  [90137ffa] + StaticArrays v1.0.1
  [3bb67fe8] + TranscodingStreams v0.9.5
  [5c2747f8] + URIs v1.1.0
  [a5390f91] + ZipFile v0.9.3
  [83775a58] + Zlib_jll v1.2.11+18
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building MPI → `~/.julia/packages/MPI/b7MVG/deps/build.log`


################################################################################
# Testing: 2021-01-11T18:32:27.077
#

    Testing DualDecomposition
Status `/tmp/jl_toIewT/Project.toml`
  [e8a6717a] BundleMethod v0.2.0
  [d0e446f1] DualDecomposition v0.1.2
  [60bf3e95] GLPK v0.14.5
  [b6b21f68] Ipopt v0.6.5
  [4076af6c] JuMP v0.21.5
  [da04e1cc] MPI v0.16.1
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_toIewT/Manifest.toml`
  [ae81ac8f] ASL_jll v0.1.1+4
  [56f22d72] Artifacts v1.3.0
  [6e4b80f9] BenchmarkTools v0.5.0
  [b99e7846] BinaryProvider v0.5.10
  [e8a6717a] BundleMethod v0.2.0
  [6e34b625] Bzip2_jll v1.0.6+5
  [fa961155] CEnum v0.4.1
  [49dc2e85] Calculus v0.5.1
  [d360d2e6] ChainRulesCore v0.9.24
  [523fee87] CodecBzip2 v0.7.2
  [944b1d66] CodecZlib v0.7.0
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.25.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [864edb3b] DataStructures v0.18.8
  [163ba53b] DiffResults v1.0.3
  [b552c78f] DiffRules v1.0.2
  [ffbed154] DocStringExtensions v0.8.3
  [d0e446f1] DualDecomposition v0.1.2
  [f6369f11] ForwardDiff v0.10.14
  [60bf3e95] GLPK v0.14.5
  [e8aa6df9] GLPK_jll v4.64.0+0
  [781609d7] GMP_jll v6.1.2+6
  [cd3eb016] HTTP v0.9.2
  [83e8ac13] IniFile v0.5.0
  [b6b21f68] Ipopt v0.6.5
  [9cc047cb] Ipopt_jll v3.13.2+1
  [692b3bcd] JLLWrappers v1.2.0
  [682c06a0] JSON v0.21.1
  [7d188eb4] JSONSchema v0.3.3
  [4076af6c] JuMP v0.21.5
  [d00139f3] METIS_jll v5.1.0+5
  [da04e1cc] MPI v0.16.1
  [7cb0a576] MPICH_jll v3.3.2+10
  [d7ed1dd3] MUMPS_seq_jll v5.2.1+4
  [1914dd2f] MacroTools v0.5.6
  [b8f27783] MathOptInterface v0.9.19
  [fdba3010] MathProgBase v0.7.8
  [739be429] MbedTLS v1.0.3
  [c8ffd9c3] MbedTLS_jll v2.16.8+1
  [9237b28f] MicrosoftMPI_jll v10.1.2+3
  [46d2c3a1] MuladdMacro v0.2.2
  [d8a4904e] MutableArithmetics v0.2.13
  [77ba4419] NaNMath v0.3.5
  [656ef2d0] OpenBLAS32_jll v0.3.9+4
  [fe0851c0] OpenMPI_jll v4.0.2+2
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [bac558e1] OrderedCollections v1.3.2
  [69de0a69] Parsers v1.0.15
  [ae029012] Requires v1.1.2
  [276daf66] SpecialFunctions v1.2.1
  [90137ffa] StaticArrays v1.0.1
  [3bb67fe8] TranscodingStreams v0.9.5
  [5c2747f8] URIs v1.1.0
  [a5390f91] ZipFile v0.9.3
  [83775a58] Zlib_jll v1.2.11+18
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584044e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043618815485
DD.dual_objective_value(algo) = -108389.99987454197
DD.dual_solution(algo) = [40.11111070986328, 23.444444210029467, -63.55555491989319, -16.777777609862543, -28.111110830033784, 44.8888884398965, -23.33333310000074, 4.666666620004317, 18.666666479996692]
Iter    0: ncols 12, nrows 24, Δ 1.000000e+02, fx0 +1.154000e+05, m +8.910000e+04, fy +1.154000e+05, time      0.8 sec.
Iter    1: ncols 12, nrows 27, Δ 1.000000e+02, fx0 +1.154000e+05, m +1.010033e+05, fy +1.658333e+05, time      1.3 sec.
Iter    2: ncols 12, nrows 30, Δ 1.000000e+02, fx0 +1.154000e+05, m +1.068514e+05, fy +1.507000e+05, time      1.3 sec.
Iter    3: ncols 12, nrows 33, Δ 5.000005e+01, fx0 +1.154000e+05, m +1.082513e+05, fy +1.332553e+05, time      1.3 sec.
Iter    4: ncols 12, nrows 33, Δ 5.000005e+01, fx0 +1.111249e+05, m +1.076848e+05, fy +1.111249e+05, time      1.3 sec.
Iter    5: ncols 12, nrows 36, Δ 5.000005e+01, fx0 +1.111249e+05, m +1.083900e+05, fy +1.120842e+05, time      1.3 sec.
Iter    6: ncols 12, nrows 36, Δ 5.000005e+01, fx0 +1.083900e+05, m +1.083900e+05, fy +1.083900e+05, time      1.3 sec.
Iter    7: ncols 12, nrows 36, Δ 5.000005e+01, fx0 +1.083900e+05, m +1.083900e+05, fy +1.083900e+05, time      1.3 sec.
TERMINATION: Optimal
DD.dual_objective_value(algo) = -108390.00000000001
DD.dual_solution(algo) = [-46.333483333333305, -63.00014999999992, -150.00014999999996, 43.87999999999998, 32.54666666666673, 105.54666666666662, 2.453483333333322, 30.45348333333319, 44.45348333333333]
objval = 96480.08276953863
Iter 0: ncols 12, nrows 6, fx0 -9.643955e+04, fx1 0.000000e+00, fy -9.643955e+04, v -6.182148e+00, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 -9.644548e+04, fx1 -9.644548e+04, fy -9.644548e+04, v -4.352687e+00, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 -9.644969e+04, fx1 -9.644969e+04, fy -9.644969e+04, v -3.463396e+00, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 -9.645287e+04, fx1 -9.645287e+04, fy -9.645287e+04, v -2.914920e+00, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 -9.645530e+04, fx1 -9.645530e+04, fy -9.645530e+04, v -2.579865e+00, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 17, fx0 -9.645720e+04, fx1 -9.645720e+04, fy -9.645720e+04, v -2.379253e+00, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 -9.645869e+04, fx1 -9.645869e+04, fy -9.645869e+04, v -2.263398e+00, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 21, fx0 -9.645987e+04, fx1 -9.645987e+04, fy -9.645987e+04, v -2.200725e+00, u 3.583181e-01, i -1
Iter 8: ncols 12, nrows 23, fx0 -9.646081e+04, fx1 -9.646081e+04, fy -9.646081e+04, v -2.171054e+00, u 4.299817e-01, i -1
Iter 9: ncols 12, nrows 25, fx0 -9.646157e+04, fx1 -9.646157e+04, fy -9.646157e+04, v -2.161458e+00, u 5.159780e-01, i -1
Iter 10: ncols 12, nrows 27, fx0 -9.646219e+04, fx1 -9.646219e+04, fy -9.646219e+04, v -2.163669e+00, u 6.191736e-01, i -1
Iter 11: ncols 12, nrows 29, fx0 -9.646269e+04, fx1 -9.646269e+04, fy -9.646269e+04, v -2.172433e+00, u 7.430084e-01, i -1
Iter 12: ncols 12, nrows 32, fx0 -9.646310e+04, fx1 -9.646310e+04, fy -9.646310e+04, v -2.743598e-01, u 8.916100e-01, i -1
Iter 13: ncols 12, nrows 33, fx0 -9.646337e+04, fx1 -9.646337e+04, fy -9.646337e+04, v -2.273735e-01, u 1.069932e+00, i -1
Iter 14: ncols 12, nrows 34, fx0 -9.646359e+04, fx1 -9.646359e+04, fy -9.646359e+04, v -1.897052e-01, u 1.283918e+00, i -1
Iter 15: ncols 12, nrows 35, fx0 -9.646378e+04, fx1 -9.646378e+04, fy -9.646378e+04, v -1.593354e-01, u 1.540702e+00, i -1
Iter 16: ncols 12, nrows 36, fx0 -9.646393e+04, fx1 -9.646393e+04, fy -9.646393e+04, v -1.347288e-01, u 1.848843e+00, i -1
Iter 17: ncols 12, nrows 37, fx0 -9.646406e+04, fx1 -9.646406e+04, fy -9.646406e+04, v -1.147045e-01, u 2.218611e+00, i -1
Iter 18: ncols 12, nrows 38, fx0 -9.646416e+04, fx1 -9.646416e+04, fy -9.646416e+04, v -9.835334e-02, u 2.662333e+00, i -1
Iter 19: ncols 12, nrows 39, fx0 -9.646425e+04, fx1 -9.646425e+04, fy -9.646425e+04, v -8.495774e-02, u 3.194800e+00, i -1
TERMINATION: Optimal: v = -0.08495773747199564
DD.dual_objective_value(algo) = 96464.24834260825
DD.dual_solution(algo) = [18.67625609840457, 13.86433032290031, 14.239644101960344, 0.813482397363856, 0.4079131761863448, 0.37331352941883855, -19.489738495768425, -14.272243499086654, -14.612957631379183]
Iter    0: ncols 12, nrows 24, Δ 1.000000e+02, fx0 -9.643955e+04, m -9.662905e+04, fy -9.643955e+04, time      0.0 sec.
Iter    1: ncols 12, nrows 27, Δ 1.000000e+02, fx0 -9.643955e+04, m -9.654063e+04, fy -9.640614e+04, time      0.0 sec.
Iter    2: ncols 12, nrows 30, Δ 1.000000e+02, fx0 -9.643955e+04, m -9.653803e+04, fy -9.641641e+04, time      0.1 sec.
Iter    3: ncols 12, nrows 30, Δ 1.000000e+02, fx0 -9.645936e+04, m -9.654495e+04, fy -9.645936e+04, time      0.1 sec.
Iter    4: ncols 12, nrows 33, Δ 1.000000e+02, fx0 -9.645936e+04, m -9.653869e+04, fy -9.625896e+04, time      0.1 sec.
Iter    5: ncols 12, nrows 36, Δ 1.000000e+02, fx0 -9.645936e+04, m -9.653352e+04, fy -9.644966e+04, time      0.1 sec.
Iter    6: ncols 12, nrows 36, Δ 1.000000e+02, fx0 -9.647294e+04, m -9.653352e+04, fy -9.647294e+04, time      0.2 sec.
Iter    7: ncols 12, nrows 39, Δ 1.000000e+02, fx0 -9.647294e+04, m -9.650306e+04, fy -9.647294e+04, time      0.2 sec.
Iter    8: ncols 12, nrows 42, Δ 1.000000e+02, fx0 -9.647294e+04, m -9.649998e+04, fy -9.640638e+04, time      0.2 sec.
Iter    9: ncols 12, nrows 45, Δ 1.000000e+02, fx0 -9.647294e+04, m -9.649693e+04, fy -9.646786e+04, time      0.2 sec.
Iter   10: ncols 12, nrows 48, Δ 1.000000e+02, fx0 -9.647294e+04, m -9.649221e+04, fy -9.646540e+04, time      0.3 sec.
Iter   11: ncols 12, nrows 48, Δ 1.000000e+02, fx0 -9.647700e+04, m -9.649221e+04, fy -9.647700e+04, time      0.3 sec.
Iter   12: ncols 12, nrows 51, Δ 1.000000e+02, fx0 -9.647700e+04, m -9.648843e+04, fy -9.647700e+04, time      0.3 sec.
Iter   13: ncols 12, nrows 54, Δ 1.000000e+02, fx0 -9.647700e+04, m -9.648517e+04, fy -9.647595e+04, time      0.3 sec.
Iter   14: ncols 12, nrows 57, Δ 1.000000e+02, fx0 -9.647700e+04, m -9.648420e+04, fy -9.647637e+04, time      0.4 sec.
Iter   15: ncols 12, nrows 57, Δ 1.000000e+02, fx0 -9.647971e+04, m -9.648420e+04, fy -9.647971e+04, time      0.4 sec.
Iter   16: ncols 12, nrows 60, Δ 1.000000e+02, fx0 -9.647971e+04, m -9.648222e+04, fy -9.647971e+04, time      0.4 sec.
Iter   17: ncols 12, nrows 63, Δ 1.000000e+02, fx0 -9.647971e+04, m -9.648121e+04, fy -9.647772e+04, time      0.4 sec.
Iter   18: ncols 12, nrows 66, Δ 1.000000e+02, fx0 -9.647971e+04, m -9.648110e+04, fy -9.647900e+04, time      0.5 sec.
Iter   19: ncols 12, nrows 69, Δ 1.000000e+02, fx0 -9.647971e+04, m -9.648090e+04, fy -9.647939e+04, time      0.5 sec.
Iter   20: ncols 12, nrows 72, Δ 1.000000e+02, fx0 -9.647971e+04, m -9.648062e+04, fy -9.647965e+04, time      0.5 sec.
Iter   21: ncols 12, nrows 72, Δ 1.000000e+02, fx0 -9.647999e+04, m -9.648062e+04, fy -9.647999e+04, time      0.5 sec.
Iter   22: ncols 12, nrows 75, Δ 1.000000e+02, fx0 -9.647999e+04, m -9.648042e+04, fy -9.647999e+04, time      0.6 sec.
Iter   23: ncols 12, nrows 78, Δ 1.000000e+02, fx0 -9.647999e+04, m -9.648031e+04, fy -9.647979e+04, time      0.6 sec.
Iter   24: ncols 12, nrows 78, Δ 1.000000e+02, fx0 -9.648000e+04, m -9.648031e+04, fy -9.648000e+04, time      0.6 sec.
Iter   25: ncols 12, nrows 81, Δ 1.000000e+02, fx0 -9.648000e+04, m -9.648022e+04, fy -9.648000e+04, time      0.6 sec.
Iter   26: ncols 12, nrows 84, Δ 1.000000e+02, fx0 -9.648000e+04, m -9.648020e+04, fy -9.647998e+04, time      0.7 sec.
Iter   27: ncols 12, nrows 84, Δ 1.000000e+02, fx0 -9.648002e+04, m -9.648020e+04, fy -9.648002e+04, time      0.7 sec.
Iter   28: ncols 12, nrows 87, Δ 1.000000e+02, fx0 -9.648002e+04, m -9.648017e+04, fy -9.648002e+04, time      0.7 sec.
Iter   29: ncols 12, nrows 87, Δ 1.000000e+02, fx0 -9.648008e+04, m -9.648017e+04, fy -9.648008e+04, time      0.7 sec.
TERMINATION: Optimal
DD.dual_objective_value(algo) = 96480.07941613164
DD.dual_solution(algo) = [39.818023896305775, 42.672180851841674, 48.17546268216956, 8.228235472849573e-9, 3.8450299931591e-8, 5.3752809507298104e-8, -39.81802390453401, -42.672180890291976, -48.175462735922366]
Test Summary: | Pass  Total
farmer        |    5      5
Test Summary:             | Pass  Total
combine_dict with 1 procs |    9      9
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:104
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:104
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:104
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:104
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:105
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:105
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:106
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:106
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:105
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:105
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:106
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:106
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:124
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:124
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:124
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:124
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:125
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:125
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:125
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:125
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = collect(::Array{SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:86
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:86
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = collect(::Array{SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:86
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:86
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = collect(::Array{SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:87
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:87
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = collect(::Array{SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:87
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:87
Test Summary:             |
combine_dict with 2 procs | No tests
Test Summary:             | Pass  Total
combine_dict with 2 procs |   18     18
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:104
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:104
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:104
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:104
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:104
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:104
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:105
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:105
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:106
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:106
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:105
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:105
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:105
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:105
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:106
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:106
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:106
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:106
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:124
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:124
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:124
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:124
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:124
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:124
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:125
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:125
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:125
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:125
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:125
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:125
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = collect(::Array{SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:86
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:86
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = collect(::Array{SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:86
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:86
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = collect(::Array{SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:86
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:86
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = collect(::Array{SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:87
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:87
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = collect(::Array{SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:87
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:87
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = collect(::Array{SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:87
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:87
Test Summary:             |
Test Summary:             |
combine_dict with 3 procs | combine_dict with 3 procs | No tests
No tests
Test Summary:             | Pass  Total
combine_dict with 3 procs |   27     27

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584044e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043618815485
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = allcollect(::Array{DualDecomposition.CouplingVariableKey,1}) at parallel.jl:75
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:75
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = allcollect(::Array{DualDecomposition.CouplingVariableKey,1}) at parallel.jl:75
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:75
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = allcollect(::Array{DualDecomposition.CouplingVariableKey,1}) at parallel.jl:76
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:76
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = allcollect(::Array{DualDecomposition.CouplingVariableKey,1}) at parallel.jl:76
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:76
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:104
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:104
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:104
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:104
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:105
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:105
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:105
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:105
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:106
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:106
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:106
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:106
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:124
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:124
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:124
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:124
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:125
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:125
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:125
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:125
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = collect(::Array{SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:86
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:86
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = collect(::Array{SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:86
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:86
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = collect(::Array{SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:87
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:87
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = collect(::Array{SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:87
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:87

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584043e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043491486227
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = allcollect(::Array{DualDecomposition.CouplingVariableKey,1}) at parallel.jl:75
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:75
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = allcollect(::Array{DualDecomposition.CouplingVariableKey,1}) at parallel.jl:75
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:75
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = allcollect(::Array{DualDecomposition.CouplingVariableKey,1}) at parallel.jl:75
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:75
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = allcollect(::Array{DualDecomposition.CouplingVariableKey,1}) at parallel.jl:76
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:76
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = allcollect(::Array{DualDecomposition.CouplingVariableKey,1}) at parallel.jl:76
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:76
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = allcollect(::Array{DualDecomposition.CouplingVariableKey,1}) at parallel.jl:76
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:76
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:104
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:104
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:104
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:104
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:104
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:104
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:105
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:105
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:106
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:106
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:105
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:105
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:105
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:105
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:106
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:106
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,Float64}) at parallel.jl:106
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:106
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:124
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:124
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:124
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:124
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:124
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:124
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:125
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:125
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:125
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:125
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = combine_dict(::Dict{Int64,SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer}) at parallel.jl:125
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:125
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = collect(::Array{SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:86
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:86
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = collect(::Array{SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:86
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:86
┌ Warning: `Allgatherv(sendbuf, counts::Vector{Cint}, comm::Comm)` is deprecated, use `Allgatherv!(sendbuf, VBuffer(similar(sendbuf, sum(counts)), counts), comm)` instead.
│   caller = collect(::Array{SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:86
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:86
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = collect(::Array{SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:87
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:87
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = collect(::Array{SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:87
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:87
┌ Warning: `Gatherv(sendbuf::AbstractArray, counts::Vector{Cint}, root::Integer, comm::Comm)` is deprecated, use `Gatherv!(view(sendbuf, 1:counts[MPI.Comm_rank(comm) + 1]), if Comm_rank(comm) == root
│         VBuffer(similar(sendbuf, sum(counts)), counts)
│     else
│         nothing
│     end, root, comm)` instead.
│   caller = collect(::Array{SparseArrays.SparseVector{Float64,Ti} where Ti<:Integer,1}) at parallel.jl:87
└ @ DualDecomposition.parallel ~/.julia/packages/DualDecomposition/sZG2k/src/parallel.jl:87

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Iter 0: ncols 12, nrows 6, fx0 1.154000e+05, fx1 0.000000e+00, fy 1.154000e+05, v -1.332200e+05, u 1.000000e-01, i 0
Iter 1: ncols 12, nrows 9, fx0 1.154000e+05, fx1 1.154000e+05, fy 5.735333e+05, v -1.315373e+04, u 1.200000e-01, i -1
Iter 2: ncols 12, nrows 11, fx0 1.154000e+05, fx1 1.154000e+05, fy 1.524635e+05, v -8.707668e+03, u 1.440000e-01, i -1
Iter 3: ncols 12, nrows 13, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.102523e+05, v -2.551334e+03, u 1.728000e-01, i -1
Iter 4: ncols 12, nrows 15, fx0 1.102523e+05, fx1 1.102523e+05, fy 1.138567e+05, v -1.867371e+03, u 2.073600e-01, i -1
Iter 5: ncols 12, nrows 16, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -4.494681e+01, u 2.488320e-01, i -1
Iter 6: ncols 12, nrows 19, fx0 1.084299e+05, fx1 1.084299e+05, fy 1.084299e+05, v -3.990977e+01, u 2.985984e-01, i -1
Iter 7: ncols 12, nrows 22, fx0 1.083900e+05, fx1 1.083900e+05, fy 1.083900e+05, v -9.584044e-04, u 3.583181e-01, i -1
TERMINATION: Optimal: v = -0.0009584043618815485
Test Summary: |
MPI tests     | No tests
Iter 0: ncols 160, nrows 79, fx0 1.790400e+02, fx1 0.000000e+00, fy 1.790400e+02, v -2.329989e+06, u 1.000000e-01, i 0
Iter 1: ncols 160, nrows 95, fx0 1.790400e+02, fx1 1.790400e+02, fy 2.263167e+06, v -2.736868e+02, u 1.200000e-01, i -1
Iter 2: ncols 160, nrows 103, fx0 1.790400e+02, fx1 1.790400e+02, fy 1.961183e+04, v -7.290002e+00, u 1.440000e-01, i -1
Iter 3: ncols 160, nrows 119, fx0 1.726358e+02, fx1 1.726358e+02, fy 1.726358e+02, v -8.858075e-01, u 1.728000e-01, i -1
Iter 4: ncols 160, nrows 135, fx0 1.719165e+02, fx1 1.719165e+02, fy 1.719165e+02, v -1.664715e-01, u 2.073600e-01, i -1
Iter 5: ncols 160, nrows 149, fx0 1.717788e+02, fx1 1.717788e+02, fy 1.717788e+02, v -2.875979e-02, u 2.488320e-01, i -1
Iter 6: ncols 160, nrows 160, fx0 1.717500e+02, fx1 1.717500e+02, fy 1.717500e+02, v -1.425825e-06, u 2.985984e-01, i -1
TERMINATION: Optimal: v = -1.4258247578169403e-6
DD.dual_objective_value(algo) = -171.7499999313459
DD.dual_solution(algo) = [-0.0009710593165693176, 0.0010811527723587333, -0.00011009345583002916, -0.0009132068116498066, 0.0010233002673685485, -0.00011009345583002916, -0.0009437472047314547, 0.0010538406604567925, -0.00011009345583002916, -0.0008892998201317869, 0.0009993932760267426, -0.00011009345583002916, 0.003128822284860649, -0.003018728829062251, -0.00011009345583002916, 0.002975777670672853, -0.0028656842149096203, -0.00011009345583002916, 0.0030369453132690055, -0.0029268518573855574, -0.00011009345583002916, 0.0028911416099020983, -0.0027810481540430088, -0.00011009345583002916, -0.0030252332009618773, 0.0031353266568413, -0.00011009345583002916, -0.002841909210317003, 0.0029520026662793212, -0.00011009345583002916, -0.0029484756422248565, 0.0030585690980472553, -0.00011009345583002916, -0.0027766950202648293, 0.0028867884762290032, -0.00011009345583002916, 0.0008446696324844985, -0.0012061087582867721, 0.00036143912566585307, 0.000804772283709798, -0.0011370684800810827, 0.0003322961965629335, 0.0008190195094209647, -0.001173757158764926, 0.0003547376492170932, 0.000808477922531065, -0.0010811264210744773, 0.00027264849851446984, -0.0009342827704358531, 0.0010260050509153479, -0.0001240021695011156, 0.003038261121215109, -0.002835745688499396, -0.0001240021695011156, -0.0029213502273482913, 0.0029560617652724633, -0.0001240021695011156, 0.0008173718765690349, -0.001146321127688415, 0.0003720065085033468, -0.0008303068540334071, 0.0010047441634138093, -7.838490306807545e-5, 0.002672713247491621, -0.0028483246875013707, -7.838490306807545e-5, -0.0025898450186254214, 0.002923952016788445, -7.838490306807545e-5, 0.0007474386251672076, -0.001080371492700883, 0.00023515470920422633, -0.0009221458787825509, 0.0009797941357850076, -0.0001326563375541542, 0.003029506145323496, -0.002651905508074827, -0.0001326563375541542, -0.0029050937376634903, 0.002787861345881775, -0.0001326563375541542, 0.0007977334711225454, -0.0011157499735919558, 0.00039796901266246263, -0.0008335005211988724, 0.0009547777654863517, -8.760937509325552e-5, 0.0026888143551031373, -0.0026818447969413858, -8.760937509325552e-5, -0.002595611453041883, 0.002772165074635538, -8.760937509325552e-5, 0.000740297619137618, -0.0010450980431805036, 0.0002628281252797666, -6.829203137210059e-23, 6.874238737290136e-23, -1.3910331331390275e-23, -6.514874504467648e-23, 6.670384420206141e-23, 1.1950117653438518e-26, -6.561300014861865e-23, 6.305201234533845e-32, -8.615636240853613e-24, -6.776263578018743e-23, -1.610101358700477e-24, 1.0095861203093942e-24, 5.9350211489797e-25, -5.273276424978188e-25, -1.9063773976506726e-26, -1.0708170490793031e-31, 3.388131791482911e-23, 1.8096224924948154e-24, -3.4677478440393436e-23, 3.9497937432620385e-25, 3.655691117666839e-27, 7.61968343356162e-25, -6.842644740211403e-23, 4.648401078949656e-23, 5.293948024332121e-25, 5.38244275605273e-25, -6.523888539274292e-25, 1.0587911840678749e-24, -1.9645539696054116e-25, 2.0627416457949532e-25, 4.957917839402065e-25, 2.352508705453025e-25, -3.0464996276528456e-24, 1.0257043382184472e-24, 3.441395682072488e-23, -6.597761848163007e-23, -4.334017270677602e-24, 1.6543611881282004e-26, -3.5646607096425086e-26, 5.162712269624597e-23, 6.776315270528094e-23, -6.862947032151129e-24, -3.938607309693718e-24, -4.250674372780341e-24, -1.808092480516256e-23, 4.285410834895348e-24, 2.5361874315642482e-23, 1.540827674575825e-24]
Iter    0: ncols 160, nrows 367, Δ 1.000000e+02, fx0 +1.790400e+02, m -3.809387e+05, fy +1.790400e+02, time      0.1 sec.
Iter    1: ncols 160, nrows 383, Δ 1.000000e+02, fx0 +1.790400e+02, m -3.385211e+03, fy +3.716608e+05, time      0.2 sec.
Iter    2: ncols 160, nrows 399, Δ 5.000005e+01, fx0 +1.790400e+02, m +1.717500e+02, fy +3.237350e+05, time      0.2 sec.
Iter    3: ncols 160, nrows 399, Δ 5.000005e+01, fx0 +1.720515e+02, m +1.717500e+02, fy +1.720515e+02, time      0.3 sec.
Iter    4: ncols 160, nrows 415, Δ 5.000005e+01, fx0 +1.720515e+02, m +1.717500e+02, fy +1.720515e+02, time      0.3 sec.
Iter    5: ncols 160, nrows 431, Δ 2.500008e+01, fx0 +1.720515e+02, m +1.717500e+02, fy +6.498887e+03, time      0.4 sec.
Iter    6: ncols 160, nrows 431, Δ 2.500008e+01, fx0 +1.717500e+02, m +1.717500e+02, fy +1.717500e+02, time      0.4 sec.
TERMINATION: Optimal
DD.dual_objective_value(algo) = -171.75000038371422
DD.dual_solution(algo) = [0.0007126313964794583, 0.0027424570996161758, -0.0034590789659818513, 0.00010270873044286698, 0.0020419287381236574, -0.0021491245435760237, 0.00042480309304063874, 0.002411849397991171, -0.0028405381563433993, -0.0005382043740203234, 0.00138071268596972, -0.0008386149304520121, 0.0034140111453450864, -0.002664935871030346, -0.0007543107921793444, 0.0027455347250036006, -0.003095049724192748, 0.00034521103434396414, 0.0030125348286831268, -0.002923339131497569, -9.442905988265122e-5, 0.002024903260143662, -0.003744695151246172, 0.0017214677512882607, -0.001982082380777866, 0.0041095884508176314, -0.0021313625881512585, -0.002514415218532085, 0.003290850294801374, -0.0007807967534335785, -0.0022048635597042275, 0.003766875559523909, -0.0015657677706415465, -0.0030966313999008462, 0.0026596963658400137, 0.00044092305823367533, -0.0004916864278065249, -0.0025228587553897583, 0.0030250742737558023, -0.0005328626761566363, -0.002493714451873741, 0.003032813329550585, -0.0005116357702541284, -0.0025053446915159314, 0.0030270571408154007, -0.0005647453719858011, -0.002454020815937386, 0.0030214769726539755, -0.0001656037468112166, 0.0018170710842748592, -0.0016606425754060515, 0.0029452194436649514, -0.002931495010785788, 5.539749097578524e-5, -0.0025593443702707835, 0.003328609820390968, -0.0008503542819026336, -0.00022027132658295162, -0.0022141858938800395, 0.0024555993663329, -4.5160056953291436e-5, 0.0017212852332348203, -0.0015400441084064144, 0.00268277013236994, -0.0028391456627363267, -9.9670511686011e-5, -0.0022702683754811364, 0.00321560381992297, -0.0006755991467118111, -0.00036734169993551247, -0.002097743390421464, 0.0023153137668042363, -0.00017966552492693294, 0.0017911637855446737, -0.0016568415433614093, 0.0029071498158081788, -0.0027856136723992623, 0.00011239950512744351, -0.0025245681441327127, 0.003203692842351323, -0.0009159122370211042, -0.00020291614674853293, -0.0022092429554967344, 0.00246035427525507, -0.00019950284512129055, 0.001569165792661964, -0.0012765598010029454, 0.0020741926995804555, -0.0032774560176304784, 0.001067436176942551, -0.0026256860054190397, 0.0027430191897200697, -2.778538670880191e-5, 0.0007509961509598746, -0.0010347289647515553, 0.00023690901076919618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.711411609483177e-25, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.762539796688424e-22, 0.0, 0.0, 2.818994859103252e-24, 0.0, 0.0, -3.227270683589383e-23, 0.0, 0.0, 0.0]
Test Summary: | Pass  Total
investment    |    2      2
    Testing DualDecomposition tests passed 

PkgEval succeeded


################################################################################
# PkgEval teardown: 2021-01-11T18:46:08.278
CPU usage: 820.08s (776.26s user, 44.86s kernel)

Network usage:
- eth0: 6.547 MiB received, 300.880 KiB sent

Raw statistics: {"blkio_stats":{"io_queue_recursive":[],"io_serviced_recursive":[{"major":8,"value":206,"op":"Read","minor":0},{"major":8,"value":0,"op":"Write","minor":0},{"major":8,"value":207,"op":"Sync","minor":0},{"major":8,"value":0,"op":"Async","minor":0},{"major":8,"value":0,"op":"Discard","minor":0},{"major":8,"value":206,"op":"Total","minor":0},{"major":253,"value":1031,"op":"Read","minor":0},{"major":253,"value":0,"op":"Write","minor":0},{"major":253,"value":1031,"op":"Sync","minor":0},{"major":253,"value":0,"op":"Async","minor":0},{"major":253,"value":0,"op":"Discard","minor":0},{"major":253,"value":1031,"op":"Total","minor":0},{"major":259,"value":3225,"op":"Read","minor":0},{"major":259,"value":36,"op":"Write","minor":0},{"major":259,"value":3244,"op":"Sync","minor":0},{"major":259,"value":17,"op":"Async","minor":0},{"major":259,"value":0,"op":"Discard","minor":0},{"major":259,"value":3261,"op":"Total","minor":0},{"major":253,"value":2194,"op":"Read","minor":2},{"major":253,"value":36,"op":"Write","minor":2},{"major":253,"value":2213,"op":"Sync","minor":2},{"major":253,"value":17,"op":"Async","minor":2},{"major":253,"value":0,"op":"Discard","minor":2},{"major":253,"value":2230,"op":"Total","minor":2}],"io_time_recursive":[],"sectors_recursive":[],"io_service_bytes_recursive":[{"major":8,"value":847872,"op":"Read","minor":0},{"major":8,"value":0,"op":"Write","minor":0},{"major":8,"value":847872,"op":"Sync","minor":0},{"major":8,"value":0,"op":"Async","minor":0},{"major":8,"value":0,"op":"Discard","minor":0},{"major":8,"value":847872,"op":"Total","minor":0},{"major":253,"value":4231168,"op":"Read","minor":0},{"major":253,"value":0,"op":"Write","minor":0},{"major":253,"value":4231168,"op":"Sync","minor":0},{"major":253,"value":0,"op":"Async","minor":0},{"major":253,"value":0,"op":"Discard","minor":0},{"major":253,"value":4231168,"op":"Total","minor":0},{"major":259,"value":83812352,"op":"Read","minor":0},{"major":259,"value":212992,"op":"Write","minor":0},{"major":259,"value":83918848,"op":"Sync","minor":0},{"major":259,"value":106496,"op":"Async","minor":0},{"major":259,"value":0,"op":"Discard","minor":0},{"major":259,"value":84025344,"op":"Total","minor":0},{"major":253,"value":79581184,"op":"Read","minor":2},{"major":253,"value":212992,"op":"Write","minor":2},{"major":253,"value":79687680,"op":"Sync","minor":2},{"major":253,"value":106496,"op":"Async","minor":2},{"major":253,"value":0,"op":"Discard","minor":2},{"major":253,"value":79794176,"op":"Total","minor":2}],"io_wait_time_recursive":[],"io_merged_recursive":[],"io_service_time_recursive":[]},"memory_stats":{"usage":324648960,"max_usage":2472697856,"stats":{"hierarchical_memory_limit":9223372036854771712,"pgmajfault":1947,"total_rss":185999360,"inactive_file":4468736,"inactive_anon":81231872,"total_pgfault":9875778,"total_cache":111349760,"total_rss_huge":0,"total_active_anon":198934528,"total_pgmajfault":1947,"pgpgin":6863340,"rss_huge":0,"mapped_file":7569408,"total_inactive_file":4468736,"dirty":135168,"total_unevictable":0,"total_dirty":135168,"writeback":135168,"pgpgout":6791110,"hierarchical_memsw_limit":0,"cache":111349760,"active_file":6905856,"pgfault":9875778,"total_mapped_file":7569408,"total_pgpgout":6791110,"total_writeback":135168,"rss":185999360,"unevictable":0,"total_inactive_anon":81231872,"total_pgpgin":6863340,"active_anon":198934528,"total_active_file":6905856},"limit":540965302272},"name":"/DualDecomposition-4PRqrnyZ","networks":{"eth0":{"rx_bytes":6864639,"rx_packets":2424,"tx_packets":2486,"tx_bytes":308101,"tx_dropped":0,"rx_dropped":28,"tx_errors":0,"rx_errors":0}},"id":"76016e35993fcc20fbfd9bbc47d91e383d35bccfc5aab7edf733be38b4741205","preread":"0001-01-01T00:00:00Z","storage_stats":{},"precpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"cpu_usage":{"usage_in_usermode":0,"usage_in_kernelmode":0,"total_usage":0}},"pids_stats":{"current":40},"num_procs":0,"cpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"system_cpu_usage":4712676144522419,"online_cpus":128,"cpu_usage":{"usage_in_usermode":776260000000,"usage_in_kernelmode":44860000000,"total_usage":820077152839,"percpu_usage":[0,0,0,0,0,0,0,0,0,820076266009,137500,625780,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67060,0,56490,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},"read":"2021-01-11T18:46:08.281814655Z"}