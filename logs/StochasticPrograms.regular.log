################################################################################
# PkgEval set-up: 2021-01-11T22:49:22.418
#

Julia Version 1.5.3
Commit 599f52c4c6 (2020-12-18 13:33 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, znver2)
Environment:
  JULIA_PKG_PRECOMPILE_AUTO = 0
  JULIA_PKGEVAL = true

Base.julia_cmd() = `/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1`


################################################################################
# Installation: 2021-01-11T22:49:24.243
#

 Installing known registries into `~/.julia`
######################################################################## 100.0%
      Added registry `General` to `~/.julia/registries/General`
  Resolving package versions...
  Installed CompilerSupportLibraries_jll ─ v0.3.4+0
  Installed MbedTLS_jll ────────────────── v2.16.8+1
  Installed Zlib_jll ───────────────────── v1.2.11+18
  Installed Reexport ───────────────────── v0.2.0
  Installed JSONSchema ─────────────────── v0.3.3
  Installed CommonSubexpressions ───────── v0.3.0
  Installed JuMP ───────────────────────── v0.21.5
  Installed StochasticPrograms ─────────── v0.5.0
  Installed Rmath_jll ──────────────────── v0.2.2+1
  Installed Rmath ──────────────────────── v0.6.1
  Installed MuladdMacro ────────────────── v0.2.2
  Installed Calculus ───────────────────── v0.5.1
  Installed TranscodingStreams ─────────── v0.9.5
  Installed FillArrays ─────────────────── v0.10.2
  Installed DataStructures ─────────────── v0.18.8
  Installed MbedTLS ────────────────────── v1.0.3
  Installed StatsBase ──────────────────── v0.33.2
  Installed QuadGK ─────────────────────── v2.4.1
  Installed DataAPI ────────────────────── v1.4.0
  Installed DiffRules ──────────────────── v1.0.2
  Installed DiffResults ────────────────── v1.0.3
  Installed Bzip2_jll ──────────────────── v1.0.6+5
  Installed BenchmarkTools ─────────────── v0.5.0
  Installed OrderedCollections ─────────── v1.3.2
  Installed Parameters ─────────────────── v0.12.1
  Installed HTTP ───────────────────────── v0.9.2
  Installed StaticArrays ───────────────── v1.0.1
  Installed Clustering ─────────────────── v0.14.2
  Installed MathOptInterface ───────────── v0.9.19
  Installed CodecZlib ──────────────────── v0.7.0
  Installed Missings ───────────────────── v0.4.4
  Installed NaNMath ────────────────────── v0.3.5
  Installed MacroTools ─────────────────── v0.5.6
  Installed JSON ───────────────────────── v0.21.1
  Installed Distances ──────────────────── v0.10.0
  Installed JLLWrappers ────────────────── v1.2.0
  Installed ZipFile ────────────────────── v0.9.3
  Installed PDMats ─────────────────────── v0.10.1
  Installed MutableArithmetics ─────────── v0.2.13
  Installed Distributions ──────────────── v0.24.10
  Installed NearestNeighbors ───────────── v0.4.8
  Installed StatsFuns ──────────────────── v0.9.6
  Installed UnPack ─────────────────────── v1.0.2
  Installed SpecialFunctions ───────────── v1.2.1
  Installed URIs ───────────────────────── v1.1.0
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed CodecBzip2 ─────────────────── v0.7.2
  Installed ForwardDiff ────────────────── v0.10.14
  Installed ChainRulesCore ─────────────── v0.9.24
  Installed OpenSpecFun_jll ────────────── v0.5.3+4
  Installed ProgressMeter ──────────────── v1.4.1
  Installed Compat ─────────────────────── v3.25.0
  Installed Parsers ────────────────────── v1.0.15
  Installed Artifacts ──────────────────── v1.3.0
  Installed IniFile ────────────────────── v0.5.0
Updating `~/.julia/environments/v1.5/Project.toml`
  [8b8459f2] + StochasticPrograms v0.5.0
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [56f22d72] + Artifacts v1.3.0
  [6e4b80f9] + BenchmarkTools v0.5.0
  [6e34b625] + Bzip2_jll v1.0.6+5
  [49dc2e85] + Calculus v0.5.1
  [d360d2e6] + ChainRulesCore v0.9.24
  [aaaa29a8] + Clustering v0.14.2
  [523fee87] + CodecBzip2 v0.7.2
  [944b1d66] + CodecZlib v0.7.0
  [bbf7d656] + CommonSubexpressions v0.3.0
  [34da2185] + Compat v3.25.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.4+0
  [9a962f9c] + DataAPI v1.4.0
  [864edb3b] + DataStructures v0.18.8
  [163ba53b] + DiffResults v1.0.3
  [b552c78f] + DiffRules v1.0.2
  [b4f34e82] + Distances v0.10.0
  [31c24e10] + Distributions v0.24.10
  [1a297f60] + FillArrays v0.10.2
  [f6369f11] + ForwardDiff v0.10.14
  [cd3eb016] + HTTP v0.9.2
  [83e8ac13] + IniFile v0.5.0
  [692b3bcd] + JLLWrappers v1.2.0
  [682c06a0] + JSON v0.21.1
  [7d188eb4] + JSONSchema v0.3.3
  [4076af6c] + JuMP v0.21.5
  [1914dd2f] + MacroTools v0.5.6
  [b8f27783] + MathOptInterface v0.9.19
  [739be429] + MbedTLS v1.0.3
  [c8ffd9c3] + MbedTLS_jll v2.16.8+1
  [e1d29d7a] + Missings v0.4.4
  [46d2c3a1] + MuladdMacro v0.2.2
  [d8a4904e] + MutableArithmetics v0.2.13
  [77ba4419] + NaNMath v0.3.5
  [b8a86587] + NearestNeighbors v0.4.8
  [efe28fd5] + OpenSpecFun_jll v0.5.3+4
  [bac558e1] + OrderedCollections v1.3.2
  [90014a1f] + PDMats v0.10.1
  [d96e819e] + Parameters v0.12.1
  [69de0a69] + Parsers v1.0.15
  [92933f4c] + ProgressMeter v1.4.1
  [1fd47b50] + QuadGK v2.4.1
  [189a3867] + Reexport v0.2.0
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+1
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v1.2.1
  [90137ffa] + StaticArrays v1.0.1
  [2913bbd2] + StatsBase v0.33.2
  [4c63d2b9] + StatsFuns v0.9.6
  [8b8459f2] + StochasticPrograms v0.5.0
  [3bb67fe8] + TranscodingStreams v0.9.5
  [5c2747f8] + URIs v1.1.0
  [3a884ed6] + UnPack v1.0.2
  [a5390f91] + ZipFile v0.9.3
  [83775a58] + Zlib_jll v1.2.11+18
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode


################################################################################
# Testing: 2021-01-11T22:49:32.623
#

    Testing StochasticPrograms
Status `/tmp/jl_5c5AWP/Project.toml`
  [aaaa29a8] Clustering v0.14.2
  [34da2185] Compat v3.25.0
  [31c24e10] Distributions v0.24.10
  [60bf3e95] GLPK v0.14.5
  [4076af6c] JuMP v0.21.5
  [1914dd2f] MacroTools v0.5.6
  [b8f27783] MathOptInterface v0.9.19
  [d8a4904e] MutableArithmetics v0.2.13
  [bac558e1] OrderedCollections v1.3.2
  [d96e819e] Parameters v0.12.1
  [92933f4c] ProgressMeter v1.4.1
  [189a3867] Reexport v0.2.0
  [8b8459f2] StochasticPrograms v0.5.0
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [de0858da] Printf
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_5c5AWP/Manifest.toml`
  [56f22d72] Artifacts v1.3.0
  [6e4b80f9] BenchmarkTools v0.5.0
  [b99e7846] BinaryProvider v0.5.10
  [6e34b625] Bzip2_jll v1.0.6+5
  [fa961155] CEnum v0.4.1
  [49dc2e85] Calculus v0.5.1
  [d360d2e6] ChainRulesCore v0.9.24
  [aaaa29a8] Clustering v0.14.2
  [523fee87] CodecBzip2 v0.7.2
  [944b1d66] CodecZlib v0.7.0
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.25.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [9a962f9c] DataAPI v1.4.0
  [864edb3b] DataStructures v0.18.8
  [163ba53b] DiffResults v1.0.3
  [b552c78f] DiffRules v1.0.2
  [b4f34e82] Distances v0.10.0
  [31c24e10] Distributions v0.24.10
  [1a297f60] FillArrays v0.10.2
  [f6369f11] ForwardDiff v0.10.14
  [60bf3e95] GLPK v0.14.5
  [e8aa6df9] GLPK_jll v4.64.0+0
  [781609d7] GMP_jll v6.1.2+6
  [cd3eb016] HTTP v0.9.2
  [83e8ac13] IniFile v0.5.0
  [692b3bcd] JLLWrappers v1.2.0
  [682c06a0] JSON v0.21.1
  [7d188eb4] JSONSchema v0.3.3
  [4076af6c] JuMP v0.21.5
  [1914dd2f] MacroTools v0.5.6
  [b8f27783] MathOptInterface v0.9.19
  [739be429] MbedTLS v1.0.3
  [c8ffd9c3] MbedTLS_jll v2.16.8+1
  [e1d29d7a] Missings v0.4.4
  [46d2c3a1] MuladdMacro v0.2.2
  [d8a4904e] MutableArithmetics v0.2.13
  [77ba4419] NaNMath v0.3.5
  [b8a86587] NearestNeighbors v0.4.8
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [bac558e1] OrderedCollections v1.3.2
  [90014a1f] PDMats v0.10.1
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.15
  [92933f4c] ProgressMeter v1.4.1
  [1fd47b50] QuadGK v2.4.1
  [189a3867] Reexport v0.2.0
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+1
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v1.2.1
  [90137ffa] StaticArrays v1.0.1
  [2913bbd2] StatsBase v0.33.2
  [4c63d2b9] StatsFuns v0.9.6
  [8b8459f2] StochasticPrograms v0.5.0
  [3bb67fe8] TranscodingStreams v0.9.5
  [5c2747f8] URIs v1.1.0
  [3a884ed6] UnPack v1.0.2
  [a5390f91] ZipFile v0.9.3
  [83775a58] Zlib_jll v1.2.11+18
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary:    | Pass  Total
DecisionVariable |  780    780
Test Summary:      | Pass  Total
DecisionConstraint |  524    524
Test Summary:     | Pass  Total
DecisionObjective |  309    309
Test Summary: | Pass  Total
Solve         |   60     60
[ Info: Loading test problems...
[ Info: Loading simple...
[ Info: Loading instant simple...
[ Info: Loading vectorized simple...
[ Info: Loading infeasible...
[ Info: Loading vectorized infeasible...
[ Info: Loading farmer...
[ Info: Loading sampler...
[ Info: Test problems loaded. Starting test sequence.
[ Info: Running functionality tests...
Test Summary:                      | Pass  Total
Stochastic Programs: Functionality |  166    166
[ Info: Running L-shaped tests...
[ Info: Running progressive-hedging tests...
Test Summary:      | Pass  Total
Structured Solvers |  958    958
[ Info: Starting distributed tests...
Test Summary:    | Pass  Total
DecisionVariable |  390    390
Test Summary:      | Pass  Total
DecisionConstraint |  262    262
Test Summary:     | Pass  Total
DecisionObjective |  153    153
[ Info: Loading test problems...
[ Info: Loading simple...
[ Info: Loading instant simple...
[ Info: Loading vectorized simple...
[ Info: Loading infeasible...
[ Info: Loading vectorized infeasible...
[ Info: Loading farmer...
[ Info: Loading sampler...
[ Info: Test problems loaded. Starting test sequence.
[ Info: Running functionality tests...
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
┌ Warning: Passing parameters as keyword arguments is deprecated. Use `JuMP.set_optimizer_attribute` or `MOI.RawParameter(key)` instead.
└ @ GLPK ~/.julia/packages/GLPK/hDmA0/src/MOI_wrapper/MOI_wrapper.jl:167
Test Summary:                   | Pass  Total
Distributed Stochastic Programs |  198    198
[ Info: Running L-shaped tests...
Asynchronous L-shaped using level sets with disaggregate cuts: Farmer: Test Failed at /home/pkgeval/.julia/packages/StochasticPrograms/54439/test/distributed/dsolver_tests.jl:49
  Expression: isapprox(objective_value(sp), res.VRP, rtol = tol)
   Evaluated: isapprox(-108094.99999999996, -108390.0; rtol = 1.0e-5)
Stacktrace:
 [1] top-level scope at /home/pkgeval/.julia/packages/StochasticPrograms/54439/test/distributed/dsolver_tests.jl:49
 [2] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1115
 [3] top-level scope at /home/pkgeval/.julia/packages/StochasticPrograms/54439/test/distributed/dsolver_tests.jl:37
 [4] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1115
 [5] top-level scope at /home/pkgeval/.julia/packages/StochasticPrograms/54439/test/distributed/dsolver_tests.jl:24
 [6] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1115
 [7] top-level scope at /home/pkgeval/.julia/packages/StochasticPrograms/54439/test/distributed/dsolver_tests.jl:23
 [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1115
 [9] top-level scope at /home/pkgeval/.julia/packages/StochasticPrograms/54439/test/distributed/dsolver_tests.jl:21
Asynchronous L-shaped using level sets with disaggregate cuts: Farmer: Test Failed at /home/pkgeval/.julia/packages/StochasticPrograms/54439/test/distributed/dsolver_tests.jl:50
  Expression: isapprox(optimal_decision(sp), res.x̄, rtol = sqrt(tol))
   Evaluated: isapprox([157.1739130434772, 80.0, 262.8260869565229], [170.0, 80.0, 250.0]; rtol = 0.0031622776601683794)
Stacktrace:
 [1] top-level scope at /home/pkgeval/.julia/packages/StochasticPrograms/54439/test/distributed/dsolver_tests.jl:50
 [2] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1115
 [3] top-level scope at /home/pkgeval/.julia/packages/StochasticPrograms/54439/test/distributed/dsolver_tests.jl:37
 [4] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1115
 [5] top-level scope at /home/pkgeval/.julia/packages/StochasticPrograms/54439/test/distributed/dsolver_tests.jl:24
 [6] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1115
 [7] top-level scope at /home/pkgeval/.julia/packages/StochasticPrograms/54439/test/distributed/dsolver_tests.jl:23
 [8] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1115
 [9] top-level scope at /home/pkgeval/.julia/packages/StochasticPrograms/54439/test/distributed/dsolver_tests.jl:21
[ Info: Running progressive-hedging tests...
Test Summary:                                                                                                                          | Pass  Fail  Total
Structured Solvers                                                                                                                     | 1156     2   1158
  L-shaped: simple problems                                                                                                            | 1091     2   1093
    L-shaped: simple problems                                                                                                          | 1091     2   1093
      Synchronous L-shaped with disaggregate cuts: Simple                                                                              |    3            3
      Synchronous L-shaped with disaggregate cuts: Simple                                                                              |    3            3
      Synchronous L-shaped with partial cut aggregation of size 2: Simple                                                              |    3            3
      Synchronous L-shaped with partial cut aggregation of size 2: Simple                                                              |    3            3
      Synchronous L-shaped with full cut aggregation: Simple                                                                           |    3            3
      Synchronous L-shaped with full cut aggregation: Simple                                                                           |    3            3
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Simple                                                 |    3            3
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Simple                                                 |    3            3
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Simple                                              |    3            3
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Simple                                              |    3            3
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Simple                              |    3            3
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Simple                              |    3            3
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Simple                                           |    3            3
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Simple                                           |    3            3
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Simple                 |    3            3
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Simple                 |    3            3
      Synchronous L-shaped using trust-region with disaggregate cuts: Simple                                                           |    3            3
      Synchronous L-shaped using trust-region with disaggregate cuts: Simple                                                           |    3            3
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Simple                                           |    3            3
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Simple                                           |    3            3
      Synchronous L-shaped using trust-region with full cut aggregation: Simple                                                        |    3            3
      Synchronous L-shaped using trust-region with full cut aggregation: Simple                                                        |    3            3
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Simple                              |    3            3
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Simple                              |    3            3
      Synchronous L-shaped using level sets with disaggregate cuts: Simple                                                             |    3            3
      Synchronous L-shaped using level sets with disaggregate cuts: Simple                                                             |    3            3
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Simple                                             |    3            3
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Simple                                             |    3            3
      Synchronous L-shaped using level sets with full cut aggregation: Simple                                                          |    3            3
      Synchronous L-shaped using level sets with full cut aggregation: Simple                                                          |    3            3
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Simple                                |    3            3
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Simple                                |    3            3
      Asynchronous L-shaped with disaggregate cuts: Simple                                                                             |    3            3
      Asynchronous L-shaped with disaggregate cuts: Simple                                                                             |    3            3
      Asynchronous L-shaped with partial cut aggregation of size 2: Simple                                                             |    3            3
      Asynchronous L-shaped with partial cut aggregation of size 2: Simple                                                             |    3            3
      Asynchronous L-shaped with full cut aggregation: Simple                                                                          |    3            3
      Asynchronous L-shaped with full cut aggregation: Simple                                                                          |    3            3
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Simple                                                |    3            3
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Simple                                                |    3            3
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Simple                                             |    3            3
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Simple                                             |    3            3
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Simple                             |    3            3
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Simple                             |    3            3
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Simple                                          |    3            3
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Simple                                          |    3            3
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Simple                |    3            3
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Simple                |    3            3
      Asynchronous L-shaped using trust-region with disaggregate cuts: Simple                                                          |    3            3
      Asynchronous L-shaped using trust-region with disaggregate cuts: Simple                                                          |    3            3
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Simple                                          |    3            3
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Simple                                          |    3            3
      Asynchronous L-shaped using trust-region with full cut aggregation: Simple                                                       |    3            3
      Asynchronous L-shaped using trust-region with full cut aggregation: Simple                                                       |    3            3
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Simple                             |    3            3
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Simple                             |    3            3
      Asynchronous L-shaped using level sets with disaggregate cuts: Simple                                                            |    3            3
      Asynchronous L-shaped using level sets with disaggregate cuts: Simple                                                            |    3            3
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Simple                                            |    3            3
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Simple                                            |    3            3
      Asynchronous L-shaped using level sets with full cut aggregation: Simple                                                         |    3            3
      Asynchronous L-shaped using level sets with full cut aggregation: Simple                                                         |    3            3
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Simple                               |    3            3
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Simple                               |    3            3
      Synchronous L-shaped with disaggregate cuts: Vectorized Simple                                                                   |    3            3
      Synchronous L-shaped with disaggregate cuts: Vectorized Simple                                                                   |    3            3
      Synchronous L-shaped with partial cut aggregation of size 2: Vectorized Simple                                                   |    3            3
      Synchronous L-shaped with partial cut aggregation of size 2: Vectorized Simple                                                   |    3            3
      Synchronous L-shaped with full cut aggregation: Vectorized Simple                                                                |    3            3
      Synchronous L-shaped with full cut aggregation: Vectorized Simple                                                                |    3            3
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Vectorized Simple                                      |    3            3
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Vectorized Simple                                      |    3            3
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Vectorized Simple                                   |    3            3
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Vectorized Simple                                   |    3            3
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Vectorized Simple                   |    3            3
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Vectorized Simple                   |    3            3
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Vectorized Simple                                |    3            3
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Vectorized Simple                                |    3            3
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Vectorized Simple      |    3            3
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Vectorized Simple      |    3            3
      Synchronous L-shaped using trust-region with disaggregate cuts: Vectorized Simple                                                |    3            3
      Synchronous L-shaped using trust-region with disaggregate cuts: Vectorized Simple                                                |    3            3
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Vectorized Simple                                |    3            3
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Vectorized Simple                                |    3            3
      Synchronous L-shaped using trust-region with full cut aggregation: Vectorized Simple                                             |    3            3
      Synchronous L-shaped using trust-region with full cut aggregation: Vectorized Simple                                             |    3            3
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Vectorized Simple                   |    3            3
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Vectorized Simple                   |    3            3
      Synchronous L-shaped using level sets with disaggregate cuts: Vectorized Simple                                                  |    3            3
      Synchronous L-shaped using level sets with disaggregate cuts: Vectorized Simple                                                  |    3            3
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Vectorized Simple                                  |    3            3
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Vectorized Simple                                  |    3            3
      Synchronous L-shaped using level sets with full cut aggregation: Vectorized Simple                                               |    3            3
      Synchronous L-shaped using level sets with full cut aggregation: Vectorized Simple                                               |    3            3
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Vectorized Simple                     |    3            3
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Vectorized Simple                     |    3            3
      Asynchronous L-shaped with disaggregate cuts: Vectorized Simple                                                                  |    3            3
      Asynchronous L-shaped with disaggregate cuts: Vectorized Simple                                                                  |    3            3
      Asynchronous L-shaped with partial cut aggregation of size 2: Vectorized Simple                                                  |    3            3
      Asynchronous L-shaped with partial cut aggregation of size 2: Vectorized Simple                                                  |    3            3
      Asynchronous L-shaped with full cut aggregation: Vectorized Simple                                                               |    3            3
      Asynchronous L-shaped with full cut aggregation: Vectorized Simple                                                               |    3            3
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Vectorized Simple                                     |    3            3
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Vectorized Simple                                     |    3            3
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Vectorized Simple                                  |    3            3
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Vectorized Simple                                  |    3            3
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Vectorized Simple                  |    3            3
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Vectorized Simple                  |    3            3
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Vectorized Simple                               |    3            3
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Vectorized Simple                               |    3            3
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Vectorized Simple     |    3            3
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Vectorized Simple     |    3            3
      Asynchronous L-shaped using trust-region with disaggregate cuts: Vectorized Simple                                               |    3            3
      Asynchronous L-shaped using trust-region with disaggregate cuts: Vectorized Simple                                               |    3            3
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Vectorized Simple                               |    3            3
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Vectorized Simple                               |    3            3
      Asynchronous L-shaped using trust-region with full cut aggregation: Vectorized Simple                                            |    3            3
      Asynchronous L-shaped using trust-region with full cut aggregation: Vectorized Simple                                            |    3            3
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Vectorized Simple                  |    3            3
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Vectorized Simple                  |    3            3
      Asynchronous L-shaped using level sets with disaggregate cuts: Vectorized Simple                                                 |    3            3
      Asynchronous L-shaped using level sets with disaggregate cuts: Vectorized Simple                                                 |    3            3
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Vectorized Simple                                 |    3            3
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Vectorized Simple                                 |    3            3
      Asynchronous L-shaped using level sets with full cut aggregation: Vectorized Simple                                              |    3            3
      Asynchronous L-shaped using level sets with full cut aggregation: Vectorized Simple                                              |    3            3
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Vectorized Simple                    |    3            3
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Vectorized Simple                    |    3            3
      Synchronous L-shaped with disaggregate cuts: Infeasible                                                                          |    4            4
      Synchronous L-shaped with disaggregate cuts: Infeasible                                                                          |    4            4
      Synchronous L-shaped with partial cut aggregation of size 2: Infeasible                                                          |    4            4
      Synchronous L-shaped with partial cut aggregation of size 2: Infeasible                                                          |    4            4
      Synchronous L-shaped with full cut aggregation: Infeasible                                                                       |    4            4
      Synchronous L-shaped with full cut aggregation: Infeasible                                                                       |    4            4
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Infeasible                                             |    4            4
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Infeasible                                             |    4            4
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Infeasible                                          |    4            4
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Infeasible                                          |    4            4
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Infeasible                          |    4            4
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Infeasible                          |    4            4
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Infeasible                                       |    4            4
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Infeasible                                       |    4            4
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Infeasible             |    4            4
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Infeasible             |    4            4
      Synchronous L-shaped using trust-region with disaggregate cuts: Infeasible                                                       |    4            4
      Synchronous L-shaped using trust-region with disaggregate cuts: Infeasible                                                       |    4            4
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Infeasible                                       |    4            4
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Infeasible                                       |    4            4
      Synchronous L-shaped using trust-region with full cut aggregation: Infeasible                                                    |    4            4
      Synchronous L-shaped using trust-region with full cut aggregation: Infeasible                                                    |    4            4
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Infeasible                          |    4            4
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Infeasible                          |    4            4
      Synchronous L-shaped using level sets with disaggregate cuts: Infeasible                                                         |    4            4
      Synchronous L-shaped using level sets with disaggregate cuts: Infeasible                                                         |    4            4
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Infeasible                                         |    4            4
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Infeasible                                         |    4            4
      Synchronous L-shaped using level sets with full cut aggregation: Infeasible                                                      |    4            4
      Synchronous L-shaped using level sets with full cut aggregation: Infeasible                                                      |    4            4
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Infeasible                            |    4            4
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Infeasible                            |    4            4
      Asynchronous L-shaped with disaggregate cuts: Infeasible                                                                         |    4            4
      Asynchronous L-shaped with disaggregate cuts: Infeasible                                                                         |    4            4
      Asynchronous L-shaped with partial cut aggregation of size 2: Infeasible                                                         |    4            4
      Asynchronous L-shaped with partial cut aggregation of size 2: Infeasible                                                         |    4            4
      Asynchronous L-shaped with full cut aggregation: Infeasible                                                                      |    4            4
      Asynchronous L-shaped with full cut aggregation: Infeasible                                                                      |    4            4
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Infeasible                                            |    4            4
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Infeasible                                            |    4            4
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Infeasible                                         |    4            4
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Infeasible                                         |    4            4
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Infeasible                         |    4            4
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Infeasible                         |    4            4
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Infeasible                                      |    4            4
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Infeasible                                      |    4            4
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Infeasible            |    4            4
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Infeasible            |    4            4
      Asynchronous L-shaped using trust-region with disaggregate cuts: Infeasible                                                      |    4            4
      Asynchronous L-shaped using trust-region with disaggregate cuts: Infeasible                                                      |    4            4
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Infeasible                                      |    4            4
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Infeasible                                      |    4            4
      Asynchronous L-shaped using trust-region with full cut aggregation: Infeasible                                                   |    4            4
      Asynchronous L-shaped using trust-region with full cut aggregation: Infeasible                                                   |    4            4
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Infeasible                         |    4            4
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Infeasible                         |    4            4
      Asynchronous L-shaped using level sets with disaggregate cuts: Infeasible                                                        |    4            4
      Asynchronous L-shaped using level sets with disaggregate cuts: Infeasible                                                        |    4            4
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Infeasible                                        |    4            4
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Infeasible                                        |    4            4
      Asynchronous L-shaped using level sets with full cut aggregation: Infeasible                                                     |    4            4
      Asynchronous L-shaped using level sets with full cut aggregation: Infeasible                                                     |    4            4
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Infeasible                           |    4            4
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Infeasible                           |    4            4
      Synchronous L-shaped with disaggregate cuts: Vectorized Infeasible                                                               |    4            4
      Synchronous L-shaped with disaggregate cuts: Vectorized Infeasible                                                               |    4            4
      Synchronous L-shaped with partial cut aggregation of size 2: Vectorized Infeasible                                               |    4            4
      Synchronous L-shaped with partial cut aggregation of size 2: Vectorized Infeasible                                               |    4            4
      Synchronous L-shaped with full cut aggregation: Vectorized Infeasible                                                            |    4            4
      Synchronous L-shaped with full cut aggregation: Vectorized Infeasible                                                            |    4            4
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Vectorized Infeasible                                  |    4            4
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Vectorized Infeasible                                  |    4            4
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Vectorized Infeasible                               |    4            4
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Vectorized Infeasible                               |    4            4
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Vectorized Infeasible               |    4            4
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Vectorized Infeasible               |    4            4
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Vectorized Infeasible                            |    4            4
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Vectorized Infeasible                            |    4            4
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Vectorized Infeasible  |    4            4
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Vectorized Infeasible  |    4            4
      Synchronous L-shaped using trust-region with disaggregate cuts: Vectorized Infeasible                                            |    4            4
      Synchronous L-shaped using trust-region with disaggregate cuts: Vectorized Infeasible                                            |    4            4
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Vectorized Infeasible                            |    4            4
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Vectorized Infeasible                            |    4            4
      Synchronous L-shaped using trust-region with full cut aggregation: Vectorized Infeasible                                         |    4            4
      Synchronous L-shaped using trust-region with full cut aggregation: Vectorized Infeasible                                         |    4            4
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Vectorized Infeasible               |    4            4
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Vectorized Infeasible               |    4            4
      Synchronous L-shaped using level sets with disaggregate cuts: Vectorized Infeasible                                              |    4            4
      Synchronous L-shaped using level sets with disaggregate cuts: Vectorized Infeasible                                              |    4            4
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Vectorized Infeasible                              |    4            4
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Vectorized Infeasible                              |    4            4
      Synchronous L-shaped using level sets with full cut aggregation: Vectorized Infeasible                                           |    4            4
      Synchronous L-shaped using level sets with full cut aggregation: Vectorized Infeasible                                           |    4            4
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Vectorized Infeasible                 |    4            4
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Vectorized Infeasible                 |    4            4
      Asynchronous L-shaped with disaggregate cuts: Vectorized Infeasible                                                              |    4            4
      Asynchronous L-shaped with disaggregate cuts: Vectorized Infeasible                                                              |    4            4
      Asynchronous L-shaped with partial cut aggregation of size 2: Vectorized Infeasible                                              |    4            4
      Asynchronous L-shaped with partial cut aggregation of size 2: Vectorized Infeasible                                              |    4            4
      Asynchronous L-shaped with full cut aggregation: Vectorized Infeasible                                                           |    4            4
      Asynchronous L-shaped with full cut aggregation: Vectorized Infeasible                                                           |    4            4
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Vectorized Infeasible                                 |    4            4
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Vectorized Infeasible                                 |    4            4
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Vectorized Infeasible                              |    4            4
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Vectorized Infeasible                              |    4            4
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Vectorized Infeasible              |    4            4
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Vectorized Infeasible              |    4            4
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Vectorized Infeasible                           |    4            4
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Vectorized Infeasible                           |    4            4
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Vectorized Infeasible |    4            4
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Vectorized Infeasible |    4            4
      Asynchronous L-shaped using trust-region with disaggregate cuts: Vectorized Infeasible                                           |    4            4
      Asynchronous L-shaped using trust-region with disaggregate cuts: Vectorized Infeasible                                           |    4            4
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Vectorized Infeasible                           |    4            4
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Vectorized Infeasible                           |    4            4
      Asynchronous L-shaped using trust-region with full cut aggregation: Vectorized Infeasible                                        |    4            4
      Asynchronous L-shaped using trust-region with full cut aggregation: Vectorized Infeasible                                        |    4            4
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Vectorized Infeasible              |    4            4
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Vectorized Infeasible              |    4            4
      Asynchronous L-shaped using level sets with disaggregate cuts: Vectorized Infeasible                                             |    4            4
      Asynchronous L-shaped using level sets with disaggregate cuts: Vectorized Infeasible                                             |    4            4
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Vectorized Infeasible                             |    4            4
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Vectorized Infeasible                             |    4            4
      Asynchronous L-shaped using level sets with full cut aggregation: Vectorized Infeasible                                          |    4            4
      Asynchronous L-shaped using level sets with full cut aggregation: Vectorized Infeasible                                          |    4            4
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Vectorized Infeasible                |    4            4
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Vectorized Infeasible                |    4            4
      Synchronous L-shaped with disaggregate cuts: Farmer                                                                              |    3            3
      Synchronous L-shaped with disaggregate cuts: Farmer                                                                              |    3            3
      Synchronous L-shaped with partial cut aggregation of size 2: Farmer                                                              |    3            3
      Synchronous L-shaped with partial cut aggregation of size 2: Farmer                                                              |    3            3
      Synchronous L-shaped with full cut aggregation: Farmer                                                                           |    3            3
      Synchronous L-shaped with full cut aggregation: Farmer                                                                           |    3            3
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Farmer                                                 |    3            3
      Synchronous L-shaped with dynamic aggregation ruled by uniform selection: Farmer                                                 |    3            3
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Farmer                                              |    3            3
      Synchronous L-shaped using regularized decomposition with disaggregate cuts: Farmer                                              |    3            3
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Farmer                              |    3            3
      Synchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Farmer                              |    3            3
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Farmer                                           |    3            3
      Synchronous L-shaped using regularized decomposition with full cut aggregation: Farmer                                           |    3            3
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Farmer                 |    3            3
      Synchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Farmer                 |    3            3
      Synchronous L-shaped using trust-region with disaggregate cuts: Farmer                                                           |    3            3
      Synchronous L-shaped using trust-region with disaggregate cuts: Farmer                                                           |    3            3
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Farmer                                           |    3            3
      Synchronous L-shaped using trust-region with partial cut aggregation of size 2: Farmer                                           |    3            3
      Synchronous L-shaped using trust-region with full cut aggregation: Farmer                                                        |    3            3
      Synchronous L-shaped using trust-region with full cut aggregation: Farmer                                                        |    3            3
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Farmer                              |    3            3
      Synchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Farmer                              |    3            3
      Synchronous L-shaped using level sets with disaggregate cuts: Farmer                                                             |    3            3
      Synchronous L-shaped using level sets with disaggregate cuts: Farmer                                                             |    3            3
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Farmer                                             |    3            3
      Synchronous L-shaped using level sets with partial cut aggregation of size 2: Farmer                                             |    3            3
      Synchronous L-shaped using level sets with full cut aggregation: Farmer                                                          |    3            3
      Synchronous L-shaped using level sets with full cut aggregation: Farmer                                                          |    3            3
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Farmer                                |    3            3
      Synchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Farmer                                |    3            3
      Asynchronous L-shaped with disaggregate cuts: Farmer                                                                             |    3            3
      Asynchronous L-shaped with disaggregate cuts: Farmer                                                                             |    3            3
      Asynchronous L-shaped with partial cut aggregation of size 2: Farmer                                                             |    3            3
      Asynchronous L-shaped with partial cut aggregation of size 2: Farmer                                                             |    3            3
      Asynchronous L-shaped with full cut aggregation: Farmer                                                                          |    3            3
      Asynchronous L-shaped with full cut aggregation: Farmer                                                                          |    3            3
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Farmer                                                |    3            3
      Asynchronous L-shaped with dynamic aggregation ruled by uniform selection: Farmer                                                |    3            3
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Farmer                                             |    3            3
      Asynchronous L-shaped using regularized decomposition with disaggregate cuts: Farmer                                             |    3            3
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Farmer                             |    3            3
      Asynchronous L-shaped using regularized decomposition with partial cut aggregation of size 2: Farmer                             |    3            3
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Farmer                                          |    3            3
      Asynchronous L-shaped using regularized decomposition with full cut aggregation: Farmer                                          |    3            3
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Farmer                |    3            3
      Asynchronous L-shaped using regularized decomposition with dynamic aggregation ruled by uniform selection: Farmer                |    3            3
      Asynchronous L-shaped using trust-region with disaggregate cuts: Farmer                                                          |    3            3
      Asynchronous L-shaped using trust-region with disaggregate cuts: Farmer                                                          |    3            3
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Farmer                                          |    3            3
      Asynchronous L-shaped using trust-region with partial cut aggregation of size 2: Farmer                                          |    3            3
      Asynchronous L-shaped using trust-region with full cut aggregation: Farmer                                                       |    3            3
      Asynchronous L-shaped using trust-region with full cut aggregation: Farmer                                                       |    3            3
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Farmer                             |    3            3
      Asynchronous L-shaped using trust-region with dynamic aggregation ruled by uniform selection: Farmer                             |    3            3
      Asynchronous L-shaped using level sets with disaggregate cuts: Farmer                                                            |    1     2      3
      Asynchronous L-shaped using level sets with disaggregate cuts: Farmer                                                            |    3            3
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Farmer                                            |    3            3
      Asynchronous L-shaped using level sets with partial cut aggregation of size 2: Farmer                                            |    3            3
      Asynchronous L-shaped using level sets with full cut aggregation: Farmer                                                         |    3            3
      Asynchronous L-shaped using level sets with full cut aggregation: Farmer                                                         |    3            3
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Farmer                               |    3            3
      Asynchronous L-shaped using level sets with dynamic aggregation ruled by uniform selection: Farmer                               |    3            3
  Progressive-hedging: simple problems                                                                                                 |   65           65
ERROR: LoadError: LoadError: Some tests did not pass: 1156 passed, 2 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/StochasticPrograms/54439/test/distributed/dsolver_tests.jl:20
in expression starting at /home/pkgeval/.julia/packages/StochasticPrograms/54439/test/distributed/run_dtests.jl:28
┌ Error: Distributed test failed, cmd : `/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1 --startup-file=no --check-bounds=yes --startup-file=no --depwarn=error --color=yes /home/pkgeval/.julia/packages/StochasticPrograms/54439/test/distributed/run_dtests.jl`
└ @ Main ~/.julia/packages/StochasticPrograms/54439/test/distributed/distributed_tests.jl:9
    Testing StochasticPrograms tests passed 

PkgEval succeeded


################################################################################
# PkgEval teardown: 2021-01-11T23:29:12.73
CPU usage: 2386.83s (2346.37s user, 43.64s kernel)

Network usage:
- eth0: 9.637 MiB received, 329.943 KiB sent

Raw statistics: {"blkio_stats":{"io_queue_recursive":[],"io_serviced_recursive":[{"major":259,"value":35,"op":"Read","minor":0},{"major":259,"value":28,"op":"Write","minor":0},{"major":259,"value":54,"op":"Sync","minor":0},{"major":259,"value":9,"op":"Async","minor":0},{"major":259,"value":0,"op":"Discard","minor":0},{"major":259,"value":63,"op":"Total","minor":0},{"major":253,"value":35,"op":"Read","minor":2},{"major":253,"value":28,"op":"Write","minor":2},{"major":253,"value":54,"op":"Sync","minor":2},{"major":253,"value":9,"op":"Async","minor":2},{"major":253,"value":0,"op":"Discard","minor":2},{"major":253,"value":63,"op":"Total","minor":2}],"io_time_recursive":[],"sectors_recursive":[],"io_service_bytes_recursive":[{"major":259,"value":323584,"op":"Read","minor":0},{"major":259,"value":176128,"op":"Write","minor":0},{"major":259,"value":430080,"op":"Sync","minor":0},{"major":259,"value":69632,"op":"Async","minor":0},{"major":259,"value":0,"op":"Discard","minor":0},{"major":259,"value":499712,"op":"Total","minor":0},{"major":253,"value":323584,"op":"Read","minor":2},{"major":253,"value":176128,"op":"Write","minor":2},{"major":253,"value":430080,"op":"Sync","minor":2},{"major":253,"value":69632,"op":"Async","minor":2},{"major":253,"value":0,"op":"Discard","minor":2},{"major":253,"value":499712,"op":"Total","minor":2}],"io_wait_time_recursive":[],"io_merged_recursive":[],"io_service_time_recursive":[]},"memory_stats":{"usage":393596928,"max_usage":4522655744,"stats":{"hierarchical_memory_limit":9223372036854771712,"pgmajfault":0,"total_rss":223375360,"inactive_file":270336,"inactive_anon":115027968,"total_pgfault":13141194,"total_cache":137551872,"total_rss_huge":0,"total_active_anon":245030912,"total_pgmajfault":0,"pgpgin":5296995,"rss_huge":0,"mapped_file":135168,"total_inactive_file":270336,"dirty":270336,"total_unevictable":0,"total_dirty":270336,"writeback":0,"pgpgout":5208883,"hierarchical_memsw_limit":0,"cache":137551872,"active_file":135168,"pgfault":13141194,"total_mapped_file":135168,"total_pgpgout":5208883,"total_writeback":0,"rss":223375360,"unevictable":0,"total_inactive_anon":115027968,"total_pgpgin":5296995,"active_anon":245030912,"total_active_file":135168},"limit":540965302272},"name":"/StochasticPrograms-JHfOocbE","networks":{"eth0":{"rx_bytes":10104999,"rx_packets":3567,"tx_packets":2791,"tx_bytes":337862,"tx_dropped":0,"rx_dropped":80,"tx_errors":0,"rx_errors":0}},"id":"f70a2b362ddaf09420eda702cf40ed3250ae5280876961006edcaed0c5c0c879","preread":"0001-01-01T00:00:00Z","storage_stats":{},"precpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"cpu_usage":{"usage_in_usermode":0,"usage_in_kernelmode":0,"total_usage":0}},"pids_stats":{"current":40},"num_procs":0,"cpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"system_cpu_usage":6883270714522419,"online_cpus":128,"cpu_usage":{"usage_in_usermode":2346370000000,"usage_in_kernelmode":43640000000,"total_usage":2386830570924,"percpu_usage":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2386830570924,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},"read":"2021-01-11T23:29:13.705449248Z"}